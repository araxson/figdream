{
  "timestamp": "2025-09-19T11:43:52.863Z",
  "totalFunctions": 133,
  "securedFunctions": 68,
  "vulnerableFunctions": 65,
  "criticalIssues": 16,
  "highIssues": 42,
  "functions": [
    {
      "name": "getPlatformAnalytics",
      "file": "core/platform/dal/queries.ts",
      "startLine": 6,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/platform/dal/queries.ts",
          "line": 6,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getPlatformAnalytics' selects data without RLS or auth filtering",
          "snippet": "export async function getPlatformAnalytics(): Promise<any> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/platform/dal/queries.ts",
          "line": 6,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getPlatformAnalytics' lacks proper error handling",
          "snippet": "export async function getPlatformAnalytics(): Promise<any> {",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/platform/dal/queries.ts",
          "line": 6,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getAllSalons",
      "file": "core/platform/dal/queries.ts",
      "startLine": 15,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/platform/dal/queries.ts",
          "line": 15,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getAllSalons' selects data without RLS or auth filtering",
          "snippet": "export async function getAllSalons(): Promise<Database['public']['Views']['salons']['Row'][]> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/platform/dal/queries.ts",
          "line": 15,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getAllSalons' lacks proper error handling",
          "snippet": "export async function getAllSalons(): Promise<Database['public']['Views']['salons']['Row'][]> {",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/platform/dal/queries.ts",
          "line": 15,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getAllUsers",
      "file": "core/platform/dal/queries.ts",
      "startLine": 28,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/platform/dal/queries.ts",
          "line": 28,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getAllUsers' selects data without RLS or auth filtering",
          "snippet": "export async function getAllUsers(): Promise<Database['public']['Views']['profiles']['Row'][]> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/platform/dal/queries.ts",
          "line": 28,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getAllUsers' lacks proper error handling",
          "snippet": "export async function getAllUsers(): Promise<Database['public']['Views']['profiles']['Row'][]> {",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/platform/dal/queries.ts",
          "line": 28,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "updateStaffProfile",
      "file": "core/staff/dal/mutations.ts",
      "startLine": 43,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/mutations.ts",
          "line": 61,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update staff profile: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/mutations.ts",
          "line": 86,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete staff profile: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/mutations.ts",
          "line": 43,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateStaffProfile' accepts data without validation",
          "snippet": "export async function updateStaffProfile(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getCurrentUserProfile",
      "file": "core/auth/dal/queries.ts",
      "startLine": 8,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/auth/dal/queries.ts",
          "line": 8,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getCurrentUserProfile' lacks proper error handling",
          "snippet": "export async function getCurrentUserProfile(): Promise<AuthUser | null> {",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/auth/dal/queries.ts",
          "line": 8,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getUserByEmail",
      "file": "core/auth/dal/queries.ts",
      "startLine": 25,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/auth/dal/queries.ts",
          "line": 25,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getUserByEmail' lacks proper error handling",
          "snippet": "export async function getUserByEmail(email: string): Promise<AuthUser | null> {",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/auth/dal/queries.ts",
          "line": 25,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getPerformanceMetrics",
      "file": "core/platform/dal/platform.queries.ts",
      "startLine": 54,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/platform/dal/platform.queries.ts",
          "line": 54,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getPerformanceMetrics' selects data without RLS or auth filtering",
          "snippet": "export async function getPerformanceMetrics(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/platform/dal/platform.queries.ts",
          "line": 54,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getPerformanceMetrics' lacks proper error handling",
          "snippet": "export async function getPerformanceMetrics(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getKPIs",
      "file": "core/platform/dal/platform.queries.ts",
      "startLine": 75,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/platform/dal/platform.queries.ts",
          "line": 75,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getKPIs' selects data without RLS or auth filtering",
          "snippet": "async function getKPIs(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/platform/dal/platform.queries.ts",
          "line": 75,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getKPIs' lacks proper error handling",
          "snippet": "async function getKPIs(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getChartData",
      "file": "core/platform/dal/platform.queries.ts",
      "startLine": 221,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/platform/dal/platform.queries.ts",
          "line": 221,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getChartData' lacks proper error handling",
          "snippet": "export async function getChartData(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/platform/dal/platform.queries.ts",
          "line": 221,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getPlatformStatistics",
      "file": "core/platform/dal/platform.queries.ts",
      "startLine": 298,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/platform/dal/platform.queries.ts",
          "line": 298,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getPlatformStatistics' selects data without RLS or auth filtering",
          "snippet": "export async function getPlatformStatistics() {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/platform/dal/platform.queries.ts",
          "line": 298,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getPlatformStatistics' lacks proper error handling",
          "snippet": "export async function getPlatformStatistics() {",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "updateSalon",
      "file": "core/salon/dal/salons.mutations.ts",
      "startLine": 40,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 67,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update salon: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 40,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateSalon' accepts data without validation",
          "snippet": "export async function updateSalon(id: string, data: SalonUpdate): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "deleteSalon",
      "file": "core/salon/dal/salons.mutations.ts",
      "startLine": 74,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 101,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete salon: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 74,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'deleteSalon' accepts data without validation",
          "snippet": "export async function deleteSalon(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateSalonOperatingHours",
      "file": "core/salon/dal/salons.mutations.ts",
      "startLine": 231,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 267,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update salon settings: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 231,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateSalonOperatingHours' accepts data without validation",
          "snippet": "export async function updateSalonOperatingHours(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateSalonSettings",
      "file": "core/salon/dal/salons.mutations.ts",
      "startLine": 249,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 267,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update salon settings: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 249,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateSalonSettings' accepts data without validation",
          "snippet": "export async function updateSalonSettings(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateBusinessHours",
      "file": "core/salon/dal/salons.mutations.ts",
      "startLine": 274,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 308,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update business hours: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 274,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateBusinessHours' accepts data without validation",
          "snippet": "export async function updateBusinessHours(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getPublicSalons",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 14,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.queries.ts",
          "line": 14,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getPublicSalons' selects data without RLS or auth filtering",
          "snippet": "export async function getPublicSalons(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/salon/dal/salons.queries.ts",
          "line": 14,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "searchSalons",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 221,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.queries.ts",
          "line": 221,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'searchSalons' selects data without RLS or auth filtering",
          "snippet": "export async function searchSalons(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/salon/dal/salons.queries.ts",
          "line": 221,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "updateBlockedTime",
      "file": "core/staff/dal/blocked-time.mutations.ts",
      "startLine": 45,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/blocked-time.mutations.ts",
          "line": 63,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update blocked time: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/blocked-time.mutations.ts",
          "line": 45,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateBlockedTime' accepts data without validation",
          "snippet": "export async function updateBlockedTime(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "deleteStaffProfile",
      "file": "core/staff/dal/mutations.ts",
      "startLine": 68,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/mutations.ts",
          "line": 86,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete staff profile: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/mutations.ts",
          "line": 68,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'deleteStaffProfile' accepts data without validation",
          "snippet": "export async function deleteStaffProfile(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "deactivateStaffMember",
      "file": "core/staff/dal/mutations.ts",
      "startLine": 157,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/mutations.ts",
          "line": 182,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update staff commission: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/mutations.ts",
          "line": 157,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'deactivateStaffMember' accepts data without validation",
          "snippet": "export async function deactivateStaffMember(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateStaffCommission",
      "file": "core/staff/dal/mutations.ts",
      "startLine": 164,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/mutations.ts",
          "line": 182,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update staff commission: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/mutations.ts",
          "line": 164,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateStaffCommission' accepts data without validation",
          "snippet": "export async function updateStaffCommission(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateTimeOffRequest",
      "file": "core/staff/dal/timeoff.mutations.ts",
      "startLine": 43,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/timeoff.mutations.ts",
          "line": 61,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update time off request: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/timeoff.mutations.ts",
          "line": 43,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateTimeOffRequest' accepts data without validation",
          "snippet": "export async function updateTimeOffRequest(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateUserProfile",
      "file": "core/auth/dal/mutations.ts",
      "startLine": 8,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/auth/dal/mutations.ts",
          "line": 8,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateUserProfile' accepts data without validation",
          "snippet": "export async function updateUserProfile(userId: string, updates: ProfileUpdate): Promise<{ success: boolean; error?: string }> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "userHasRole",
      "file": "core/auth/dal/queries.ts",
      "startLine": 39,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/auth/dal/queries.ts",
          "line": 39,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'userHasRole' lacks proper error handling",
          "snippet": "export async function userHasRole(userId: string, role: string): Promise<boolean> {",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "toggleFavorite",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 108,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/customer/dal/mutations.ts",
          "line": 150,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to remove favorite: ${deleteError.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "getCustomers",
      "file": "core/customer/dal/queries.ts",
      "startLine": 10,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/customer/dal/queries.ts",
          "line": 10,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getCustomerById",
      "file": "core/customer/dal/queries.ts",
      "startLine": 57,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/customer/dal/queries.ts",
          "line": 57,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "updateSalonStatus",
      "file": "core/platform/dal/mutations.ts",
      "startLine": 6,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/platform/dal/mutations.ts",
          "line": 6,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateSalonStatus' accepts data without validation",
          "snippet": "export async function updateSalonStatus(salonId: string, status: string): Promise<{ success: boolean; error?: string }> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateUserRole",
      "file": "core/platform/dal/mutations.ts",
      "startLine": 29,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/platform/dal/mutations.ts",
          "line": 29,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateUserRole' accepts data without validation",
          "snippet": "export async function updateUserRole(userId: string, role: string): Promise<{ success: boolean; error?: string }> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getTrends",
      "file": "core/platform/dal/platform.queries.ts",
      "startLine": 94,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/platform/dal/platform.queries.ts",
          "line": 94,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getTrends' lacks proper error handling",
          "snippet": "async function getTrends(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "toggleSalonFeatured",
      "file": "core/salon/dal/salons.mutations.ts",
      "startLine": 108,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 108,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleSalonFeatured' accepts data without validation",
          "snippet": "export async function toggleSalonFeatured(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "toggleSalonBookingAcceptance",
      "file": "core/salon/dal/salons.mutations.ts",
      "startLine": 151,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 151,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleSalonBookingAcceptance' accepts data without validation",
          "snippet": "export async function toggleSalonBookingAcceptance(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "verifySalon",
      "file": "core/salon/dal/salons.mutations.ts",
      "startLine": 195,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.mutations.ts",
          "line": 195,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'verifySalon' accepts data without validation",
          "snippet": "export async function verifySalon(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getSalons",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 53,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.queries.ts",
          "line": 53,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSalonById",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 110,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.queries.ts",
          "line": 110,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSalonBySlug",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 141,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.queries.ts",
          "line": 141,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getSalonBySlug' selects data without RLS or auth filtering",
          "snippet": "export async function getSalonBySlug(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        }
      ]
    },
    {
      "name": "getFeaturedSalons",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 167,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.queries.ts",
          "line": 167,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getFeaturedSalons' selects data without RLS or auth filtering",
          "snippet": "export async function getFeaturedSalons(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        }
      ]
    },
    {
      "name": "getSalonsByChain",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 192,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.queries.ts",
          "line": 192,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSalonStaff",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 339,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.queries.ts",
          "line": 339,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('id, user_id, title, bio, specializations, profile_image_url, rating_average, is_bookable')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSalonServices",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 362,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.queries.ts",
          "line": 362,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSalonCustomerAnalytics",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 428,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salon/dal/salons.queries.ts",
          "line": 428,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('customer_id')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "createBlockedTime",
      "file": "core/staff/dal/blocked-time.mutations.ts",
      "startLine": 14,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/blocked-time.mutations.ts",
          "line": 63,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update blocked time: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "createStaffProfile",
      "file": "core/staff/dal/mutations.ts",
      "startLine": 14,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/mutations.ts",
          "line": 61,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update staff profile: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "toggleStaffBookable",
      "file": "core/staff/dal/mutations.ts",
      "startLine": 93,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/mutations.ts",
          "line": 93,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleStaffBookable' accepts data without validation",
          "snippet": "export async function toggleStaffBookable(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "toggleStaffFeatured",
      "file": "core/staff/dal/mutations.ts",
      "startLine": 125,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/mutations.ts",
          "line": 125,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleStaffFeatured' accepts data without validation",
          "snippet": "export async function toggleStaffFeatured(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getStaffMembers",
      "file": "core/staff/dal/queries.ts",
      "startLine": 16,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/queries.ts",
          "line": 16,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffProfiles",
      "file": "core/staff/dal/queries.ts",
      "startLine": 25,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/queries.ts",
          "line": 25,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffProfileById",
      "file": "core/staff/dal/queries.ts",
      "startLine": 81,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/queries.ts",
          "line": 81,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffProfileByUserId",
      "file": "core/staff/dal/queries.ts",
      "startLine": 111,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/queries.ts",
          "line": 111,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "searchStaffProfiles",
      "file": "core/staff/dal/queries.ts",
      "startLine": 141,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/queries.ts",
          "line": 141,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffMemberById",
      "file": "core/staff/dal/queries.ts",
      "startLine": 152,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/queries.ts",
          "line": 152,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffMemberByUserId",
      "file": "core/staff/dal/queries.ts",
      "startLine": 159,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/queries.ts",
          "line": 159,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffById",
      "file": "core/staff/dal/queries.ts",
      "startLine": 168,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/queries.ts",
          "line": 168,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getActiveStaffBySalon",
      "file": "core/staff/dal/salon.queries.ts",
      "startLine": 16,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/salon.queries.ts",
          "line": 16,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getBookableStaffBySalon",
      "file": "core/staff/dal/salon.queries.ts",
      "startLine": 44,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/salon.queries.ts",
          "line": 44,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getFeaturedStaff",
      "file": "core/staff/dal/salon.queries.ts",
      "startLine": 73,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/salon.queries.ts",
          "line": 73,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"staff_id\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getAvailableStaffForService",
      "file": "core/staff/dal/salon.queries.ts",
      "startLine": 86,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/salon.queries.ts",
          "line": 86,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"staff_id\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "createTimeOffRequest",
      "file": "core/staff/dal/timeoff.mutations.ts",
      "startLine": 14,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/timeoff.mutations.ts",
          "line": 61,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update time off request: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "approveTimeOffRequest",
      "file": "core/staff/dal/timeoff.mutations.ts",
      "startLine": 68,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/timeoff.mutations.ts",
          "line": 68,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'approveTimeOffRequest' accepts data without validation",
          "snippet": "export async function approveTimeOffRequest(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "rejectTimeOffRequest",
      "file": "core/staff/dal/timeoff.mutations.ts",
      "startLine": 97,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/timeoff.mutations.ts",
          "line": 97,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'rejectTimeOffRequest' accepts data without validation",
          "snippet": "export async function rejectTimeOffRequest(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "cancelTimeOffRequest",
      "file": "core/staff/dal/timeoff.mutations.ts",
      "startLine": 133,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/timeoff.mutations.ts",
          "line": 133,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'cancelTimeOffRequest' accepts data without validation",
          "snippet": "export async function cancelTimeOffRequest(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getTimeOffRequests",
      "file": "core/staff/dal/timeoff.queries.ts",
      "startLine": 11,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/timeoff.queries.ts",
          "line": 11,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffBlockedTimes",
      "file": "core/staff/dal/timeoff.queries.ts",
      "startLine": 52,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/timeoff.queries.ts",
          "line": 52,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getUserById",
      "file": "core/users/dal/queries.ts",
      "startLine": 6,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/users/dal/queries.ts",
          "line": 6,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getAllUsers",
      "file": "core/users/dal/queries.ts",
      "startLine": 22,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/users/dal/queries.ts",
          "line": 22,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "updateUserPassword",
      "file": "core/auth/dal/mutations.ts",
      "startLine": 31,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getCustomerMetrics",
      "file": "core/customer/dal/analytics.queries.ts",
      "startLine": 7,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerInsights",
      "file": "core/customer/dal/analytics.queries.ts",
      "startLine": 70,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "updateCustomerProfile",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 15,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "upsertCustomerPreferences",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 44,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "addCustomerFavorite",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 70,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "removeCustomerFavorite",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 92,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "clearFavoritesByType",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 186,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "DELETE"
      ],
      "issues": []
    },
    {
      "name": "addCustomerNote",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 224,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updateCustomerNote",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 247,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deleteCustomerNote",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 272,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "addLoyaltyPoints",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 288,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "redeemLoyaltyPoints",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 320,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "markCustomerAsVIP",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 342,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "removeVIPStatus",
      "file": "core/customer/dal/mutations.ts",
      "startLine": 368,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "getCustomerByEmail",
      "file": "core/customer/dal/queries.ts",
      "startLine": 90,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "searchCustomers",
      "file": "core/customer/dal/queries.ts",
      "startLine": 112,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getBookingById",
      "file": "core/customer/dal/queries.ts",
      "startLine": 136,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerWithAppointments",
      "file": "core/customer/dal/relationships.queries.ts",
      "startLine": 12,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerAppointments",
      "file": "core/customer/dal/relationships.queries.ts",
      "startLine": 59,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerPreferences",
      "file": "core/customer/dal/relationships.queries.ts",
      "startLine": 97,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerFavorites",
      "file": "core/customer/dal/relationships.queries.ts",
      "startLine": 116,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerNotes",
      "file": "core/customer/dal/relationships.queries.ts",
      "startLine": 163,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getCustomerLoyaltyPoints",
      "file": "core/customer/dal/relationships.queries.ts",
      "startLine": 180,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getCustomerLoyaltyTransactions",
      "file": "core/customer/dal/relationships.queries.ts",
      "startLine": 197,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getDashboardMetrics",
      "file": "core/platform/dal/platform.queries.ts",
      "startLine": 14,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getComparisons",
      "file": "core/platform/dal/platform.queries.ts",
      "startLine": 158,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getSystemHealth",
      "file": "core/platform/dal/queries.ts",
      "startLine": 41,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "submitContactForm",
      "file": "core/public/dal/mutations.ts",
      "startLine": 6,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "subscribeToNewsletter",
      "file": "core/public/dal/mutations.ts",
      "startLine": 27,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getFeaturedServices",
      "file": "core/public/dal/queries.ts",
      "startLine": 14,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getTestimonials",
      "file": "core/public/dal/queries.ts",
      "startLine": 56,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getPricingPlans",
      "file": "core/public/dal/queries.ts",
      "startLine": 92,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getFAQItems",
      "file": "core/public/dal/queries.ts",
      "startLine": 152,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getTeamMembers",
      "file": "core/public/dal/queries.ts",
      "startLine": 199,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "createSalon",
      "file": "core/salon/dal/salons.mutations.ts",
      "startLine": 11,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "getSalonChains",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 265,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getSalonChainById",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 275,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getSalonMetrics",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 287,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getSalonRevenue",
      "file": "core/salon/dal/salons.queries.ts",
      "startLine": 386,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "checkPermission",
      "file": "core/shared/dal/auth-verification.ts",
      "startLine": 129,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "buildPermissions",
      "file": "core/shared/dal/auth-verification.ts",
      "startLine": 168,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "sanitizeInput",
      "file": "core/shared/dal/auth-verification.ts",
      "startLine": 225,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "createSecureDTO",
      "file": "core/shared/dal/auth-verification.ts",
      "startLine": 253,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "isSelectQueryError",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 12,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "hasUserRoles",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 22,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getCustomerAnalytics",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 43,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getDailyMetrics",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 63,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "calculateAppointmentTotal",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 77,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "adaptSalonData",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 95,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "adaptUserData",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 162,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "userRoles",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 166,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "adaptAuditLog",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 187,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "safeQuery",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 195,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getTable",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 213,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "to",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 397,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getTableOrAdapter",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 399,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "createAdaptedClient",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 415,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "removeBlockedTime",
      "file": "core/staff/dal/blocked-time.mutations.ts",
      "startLine": 70,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "DELETE"
      ],
      "issues": []
    },
    {
      "name": "assignServiceToStaff",
      "file": "core/staff/dal/services.mutations.ts",
      "startLine": 10,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "updateUser",
      "file": "core/users/dal/mutations.ts",
      "startLine": 7,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE",
        "DELETE"
      ],
      "issues": []
    },
    {
      "name": "deleteUser",
      "file": "core/users/dal/mutations.ts",
      "startLine": 24,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "DELETE"
      ],
      "issues": []
    },
    {
      "name": "getUserProfile",
      "file": "core/users/dal/queries.ts",
      "startLine": 37,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getUserActivity",
      "file": "core/users/dal/queries.ts",
      "startLine": 56,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getAvailableRoles",
      "file": "core/users/dal/queries.ts",
      "startLine": 67,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getUserSecuritySettings",
      "file": "core/users/dal/queries.ts",
      "startLine": 83,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getUsersWithRoles",
      "file": "core/users/dal/queries.ts",
      "startLine": 100,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getUserManagementStats",
      "file": "core/users/dal/queries.ts",
      "startLine": 118,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    }
  ],
  "issuesByType": {},
  "recommendations": [
    "🚨 CRITICAL: 16 critical security issues found. Fix these immediately to prevent data breaches.",
    "🛡️ Row Level Security: 10 functions bypass RLS. Add appropriate filters to ensure users only access their data.",
    "💉 SQL Injection: 16 potential SQL injection vulnerabilities. Never use string interpolation in queries. Use parameterized queries.",
    "✅ Validation: 22 functions lack input validation. Implement Zod schemas for all data inputs.",
    "⚠️ Error Handling: 11 functions lack proper error handling. Wrap all database operations in try-catch blocks."
  ],
  "securityScore": 95
}