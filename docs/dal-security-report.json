{
  "timestamp": "2025-09-19T02:01:14.328Z",
  "totalFunctions": 698,
  "securedFunctions": 418,
  "vulnerableFunctions": 280,
  "criticalIssues": 90,
  "highIssues": 145,
  "functions": [
    {
      "name": "updateSalon",
      "file": "core/salons/dal/salons-mutations.ts",
      "startLine": 34,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 34,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'updateSalon' performs SELECT, UPDATE without auth check",
          "snippet": "export async function updateSalon(id: string, data: SalonUpdate): Promise<void> {",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 34,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'updateSalon' selects data without RLS or auth filtering",
          "snippet": "export async function updateSalon(id: string, data: SalonUpdate): Promise<void> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 43,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update salon: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 59,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete salon: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 34,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateSalon' accepts data without validation",
          "snippet": "export async function updateSalon(id: string, data: SalonUpdate): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "createSalon",
      "file": "core/salons/dal/salons-mutations.ts",
      "startLine": 11,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 11,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'createSalon' performs SELECT, INSERT, UPDATE without auth check",
          "snippet": "export async function createSalon(data: SalonInsert): Promise<string> {",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 11,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'createSalon' selects data without RLS or auth filtering",
          "snippet": "export async function createSalon(data: SalonInsert): Promise<string> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 43,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update salon: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 59,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete salon: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "deleteSalon",
      "file": "core/salons/dal/salons-mutations.ts",
      "startLine": 50,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 50,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'deleteSalon' performs SELECT, UPDATE without auth check",
          "snippet": "export async function deleteSalon(id: string): Promise<void> {",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 50,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'deleteSalon' selects data without RLS or auth filtering",
          "snippet": "export async function deleteSalon(id: string): Promise<void> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 59,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete salon: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 50,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'deleteSalon' accepts data without validation",
          "snippet": "export async function deleteSalon(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "logAdminAction",
      "file": "core/admin/dal/index.ts",
      "startLine": 51,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/admin/dal/index.ts",
          "line": 51,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'logAdminAction' performs SELECT, INSERT without auth check",
          "snippet": "async function logAdminAction(",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/admin/dal/index.ts",
          "line": 51,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'logAdminAction' selects data without RLS or auth filtering",
          "snippet": "async function logAdminAction(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/admin/dal/index.ts",
          "line": 51,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'logAdminAction' accepts data without validation",
          "snippet": "async function logAdminAction(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateSalonStatus",
      "file": "core/admin/dal/index.ts",
      "startLine": 601,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/admin/dal/index.ts",
          "line": 601,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'updateSalonStatus' performs SELECT, UPDATE without auth check",
          "snippet": "export async function updateSalonStatus(",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/admin/dal/index.ts",
          "line": 601,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'updateSalonStatus' selects data without RLS or auth filtering",
          "snippet": "export async function updateSalonStatus(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/admin/dal/index.ts",
          "line": 601,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateSalonStatus' accepts data without validation",
          "snippet": "export async function updateSalonStatus(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getCustomerInsights",
      "file": "core/analytics/dal/customer-queries.ts",
      "startLine": 86,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/customer-queries.ts",
          "line": 86,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getCustomerInsights' selects data without RLS or auth filtering",
          "snippet": "export async function getCustomerInsights(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/analytics/dal/customer-queries.ts",
          "line": 86,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getCustomerInsights' lacks proper error handling",
          "snippet": "export async function getCustomerInsights(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/analytics/dal/customer-queries.ts",
          "line": 86,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "updateReview",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 43,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 58,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 80,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete review: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 43,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateReview' accepts data without validation",
          "snippet": "export async function updateReview(id: string, data: ReviewUpdate): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "deleteReview",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 65,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 80,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete review: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 102,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review status: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 65,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'deleteReview' accepts data without validation",
          "snippet": "export async function deleteReview(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "toggleReviewHelpful",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 310,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 329,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review verification: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 348,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review featured status: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 310,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleReviewHelpful' accepts data without validation",
          "snippet": "export async function toggleReviewHelpful(data: ReviewVoteInsert): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "markReviewAsVerified",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 314,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 329,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review verification: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 348,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review featured status: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 314,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'markReviewAsVerified' accepts data without validation",
          "snippet": "export async function markReviewAsVerified(id: string, isVerified: boolean): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getReviewStats",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 153,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 153,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getReviewStats' selects data without RLS or auth filtering",
          "snippet": "export async function getReviewStats(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 153,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getReviewStats' lacks proper error handling",
          "snippet": "export async function getReviewStats(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 153,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getReviewMetrics",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 244,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 244,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getReviewMetrics' selects data without RLS or auth filtering",
          "snippet": "export async function getReviewMetrics(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 244,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getReviewMetrics' lacks proper error handling",
          "snippet": "export async function getReviewMetrics(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 244,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getReviewInsights",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 260,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 260,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getReviewInsights' selects data without RLS or auth filtering",
          "snippet": "export async function getReviewInsights(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 260,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getReviewInsights' lacks proper error handling",
          "snippet": "export async function getReviewInsights(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 260,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "toggleSalonFeatured",
      "file": "core/salons/dal/salons-mutations.ts",
      "startLine": 66,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 66,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'toggleSalonFeatured' performs SELECT, UPDATE without auth check",
          "snippet": "export async function toggleSalonFeatured(id: string): Promise<void> {",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 66,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'toggleSalonFeatured' selects data without RLS or auth filtering",
          "snippet": "export async function toggleSalonFeatured(id: string): Promise<void> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 66,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleSalonFeatured' accepts data without validation",
          "snippet": "export async function toggleSalonFeatured(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "toggleSalonBookingAcceptance",
      "file": "core/salons/dal/salons-mutations.ts",
      "startLine": 92,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 92,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'toggleSalonBookingAcceptance' performs SELECT, UPDATE without auth check",
          "snippet": "export async function toggleSalonBookingAcceptance(id: string): Promise<void> {",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 92,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'toggleSalonBookingAcceptance' selects data without RLS or auth filtering",
          "snippet": "export async function toggleSalonBookingAcceptance(id: string): Promise<void> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 92,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleSalonBookingAcceptance' accepts data without validation",
          "snippet": "export async function toggleSalonBookingAcceptance(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "rescheduleAppointment",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 341,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 341,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'rescheduleAppointment' performs SELECT, UPDATE without auth check",
          "snippet": "async function rescheduleAppointment(parameters: { appointmentId: string; newTime: string; staffId?: string }): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 341,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'rescheduleAppointment' selects data without RLS or auth filtering",
          "snippet": "async function rescheduleAppointment(parameters: { appointmentId: string; newTime: string; staffId?: string }): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 341,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'rescheduleAppointment' accepts data without validation",
          "snippet": "async function rescheduleAppointment(parameters: { appointmentId: string; newTime: string; staffId?: string }): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "reassignStaff",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 386,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 386,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'reassignStaff' performs SELECT, UPDATE without auth check",
          "snippet": "async function reassignStaff(parameters: { appointmentId: string; newStaffId: string }): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 386,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'reassignStaff' selects data without RLS or auth filtering",
          "snippet": "async function reassignStaff(parameters: { appointmentId: string; newStaffId: string }): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 386,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'reassignStaff' accepts data without validation",
          "snippet": "async function reassignStaff(parameters: { appointmentId: string; newStaffId: string }): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "splitAppointment",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 428,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 428,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'splitAppointment' performs SELECT, UPDATE without auth check",
          "snippet": "function splitAppointment(_parameters: Record<string, unknown>): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 428,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'splitAppointment' selects data without RLS or auth filtering",
          "snippet": "function splitAppointment(_parameters: Record<string, unknown>): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 428,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'splitAppointment' accepts data without validation",
          "snippet": "function splitAppointment(_parameters: Record<string, unknown>): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "extendWorkingHours",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 433,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 433,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'extendWorkingHours' performs SELECT, UPDATE without auth check",
          "snippet": "function extendWorkingHours(_parameters: Record<string, unknown>): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 433,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'extendWorkingHours' selects data without RLS or auth filtering",
          "snippet": "function extendWorkingHours(_parameters: Record<string, unknown>): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 433,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'extendWorkingHours' accepts data without validation",
          "snippet": "function extendWorkingHours(_parameters: Record<string, unknown>): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "addStaffBreak",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 438,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 438,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'addStaffBreak' performs SELECT, UPDATE without auth check",
          "snippet": "function addStaffBreak(_parameters: Record<string, unknown>): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 438,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'addStaffBreak' selects data without RLS or auth filtering",
          "snippet": "function addStaffBreak(_parameters: Record<string, unknown>): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 438,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'addStaffBreak' accepts data without validation",
          "snippet": "function addStaffBreak(_parameters: Record<string, unknown>): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "cancelAppointment",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 443,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 443,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'cancelAppointment' performs SELECT, UPDATE without auth check",
          "snippet": "async function cancelAppointment(parameters: { appointmentId: string; reason: string }): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 443,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'cancelAppointment' selects data without RLS or auth filtering",
          "snippet": "async function cancelAppointment(parameters: { appointmentId: string; reason: string }): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 443,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'cancelAppointment' accepts data without validation",
          "snippet": "async function cancelAppointment(parameters: { appointmentId: string; reason: string }): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateService",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 40,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 55,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update service: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 77,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete service: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 40,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateService' accepts data without validation",
          "snippet": "export async function updateService(id: string, data: ServiceUpdate): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "bulkUpdateServicePrices",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 148,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 166,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update service price: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 192,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update service category: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 148,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'bulkUpdateServicePrices' accepts data without validation",
          "snippet": "export async function bulkUpdateServicePrices(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateServiceCategory",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 174,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 192,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update service category: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 174,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        },
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 174,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateServiceCategory' accepts data without validation",
          "snippet": "export async function updateServiceCategory(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateStaffProfile",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 49,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 67,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update staff profile: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 92,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete staff profile: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 49,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateStaffProfile' accepts data without validation",
          "snippet": "export async function updateStaffProfile(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateStaffSchedule",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 160,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 178,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update staff schedule: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 200,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete staff schedule: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 160,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateStaffSchedule' accepts data without validation",
          "snippet": "export async function updateStaffSchedule(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateUserStatus",
      "file": "core/admin/dal/index.ts",
      "startLine": 542,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/admin/dal/index.ts",
          "line": 585,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "`update_user_status_${status}`,",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/admin/dal/index.ts",
          "line": 542,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateUserStatus' accepts data without validation",
          "snippet": "export async function updateUserStatus(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getPerformanceMetrics",
      "file": "core/analytics/dal/platform-queries.ts",
      "startLine": 54,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/platform-queries.ts",
          "line": 54,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getPerformanceMetrics' selects data without RLS or auth filtering",
          "snippet": "export async function getPerformanceMetrics(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/analytics/dal/platform-queries.ts",
          "line": 54,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getPerformanceMetrics' lacks proper error handling",
          "snippet": "export async function getPerformanceMetrics(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getKPIs",
      "file": "core/analytics/dal/platform-queries.ts",
      "startLine": 75,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/platform-queries.ts",
          "line": 75,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getKPIs' selects data without RLS or auth filtering",
          "snippet": "async function getKPIs(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/analytics/dal/platform-queries.ts",
          "line": 75,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getKPIs' lacks proper error handling",
          "snippet": "async function getKPIs(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getChartData",
      "file": "core/analytics/dal/platform-queries.ts",
      "startLine": 221,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/platform-queries.ts",
          "line": 221,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getChartData' lacks proper error handling",
          "snippet": "export async function getChartData(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/analytics/dal/platform-queries.ts",
          "line": 221,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getPlatformStatistics",
      "file": "core/analytics/dal/platform-queries.ts",
      "startLine": 298,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/platform-queries.ts",
          "line": 298,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getPlatformStatistics' selects data without RLS or auth filtering",
          "snippet": "export async function getPlatformStatistics() {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/analytics/dal/platform-queries.ts",
          "line": 298,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getPlatformStatistics' lacks proper error handling",
          "snippet": "export async function getPlatformStatistics() {",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getStaffMetrics",
      "file": "core/analytics/dal/staff-queries.ts",
      "startLine": 9,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/staff-queries.ts",
          "line": 9,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getStaffMetrics' lacks proper error handling",
          "snippet": "export async function getStaffMetrics(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/analytics/dal/staff-queries.ts",
          "line": 9,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": "let performanceQuery = supabase.from(\"staff_performance\").select(\"*\");",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "to",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 342,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/audit/dal/audit-commands.ts",
          "line": 342,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'to' selects data without RLS or auth filtering",
          "snippet": "// Helper function to log configuration changes",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/audit/dal/audit-commands.ts",
          "line": 342,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'to' lacks proper error handling",
          "snippet": "// Helper function to log configuration changes",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "logConfigChange",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 343,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/audit/dal/audit-commands.ts",
          "line": 343,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'logConfigChange' selects data without RLS or auth filtering",
          "snippet": "export async function logConfigChange(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/audit/dal/audit-commands.ts",
          "line": 343,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'logConfigChange' lacks proper error handling",
          "snippet": "export async function logConfigChange(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "createBooking",
      "file": "core/booking/dal/mutations.ts",
      "startLine": 13,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/booking/dal/mutations.ts",
          "line": 44,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "const startTime = new Date(`${bookingData.selectedDate?.toDateString()} ${bookingData.selectedTime}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/booking/dal/mutations.ts",
          "line": 13,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'createBooking' accepts data without validation",
          "snippet": "export async function createBooking(bookingData: BookingWizardState) {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "calculateEarnedPoints",
      "file": "core/customer/dal/loyalty.ts",
      "startLine": 405,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/customer/dal/loyalty.ts",
          "line": 405,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'calculateEarnedPoints' selects data without RLS or auth filtering",
          "snippet": "export async function calculateEarnedPoints(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/customer/dal/loyalty.ts",
          "line": 405,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'calculateEarnedPoints' lacks proper error handling",
          "snippet": "export async function calculateEarnedPoints(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "voteOnReview",
      "file": "core/customer/dal/reviews.ts",
      "startLine": 470,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/customer/dal/reviews.ts",
          "line": 500,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to remove vote: ${deleteError.message}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/customer/dal/reviews.ts",
          "line": 510,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update vote: ${updateError.message}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "deleteStockLocation",
      "file": "core/inventory/dal/stock-mutations.ts",
      "startLine": 78,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/stock-mutations.ts",
          "line": 78,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        },
        {
          "file": "core/inventory/dal/stock-mutations.ts",
          "line": 78,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'deleteStockLocation' accepts data without validation",
          "snippet": "export async function deleteStockLocation(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "adjustStock",
      "file": "core/inventory/dal/stock-mutations.ts",
      "startLine": 95,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/stock-mutations.ts",
          "line": 95,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        },
        {
          "file": "core/inventory/dal/stock-mutations.ts",
          "line": 95,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'adjustStock' accepts data without validation",
          "snippet": "export async function adjustStock(data: StockAdjustmentFormData): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateLoyaltyTier",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 509,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/mutations.ts",
          "line": 534,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "if (error) throw new Error(`Failed to update tier: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/loyalty/dal/mutations.ts",
          "line": 554,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "if (error) throw new Error(`Failed to delete tier: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "updateReviewStatus",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 87,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 102,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review status: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 87,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateReviewStatus' accepts data without validation",
          "snippet": "export async function updateReviewStatus(id: string, status: ReviewStatus): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "upsertReviewVote",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 231,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 274,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review helpful count: ${updateReviewError.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 231,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'upsertReviewVote' accepts data without validation",
          "snippet": "export async function upsertReviewVote(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "removeReviewVote",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 237,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 274,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review helpful count: ${updateReviewError.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 237,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'removeReviewVote' accepts data without validation",
          "snippet": "export async function removeReviewVote(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "respondToReview",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 287,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 329,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review verification: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 287,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'respondToReview' accepts data without validation",
          "snippet": "export async function respondToReview(data: ReviewResponseInsert): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "markReviewAsFeatured",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 333,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 348,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review featured status: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 333,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'markReviewAsFeatured' accepts data without validation",
          "snippet": "export async function markReviewAsFeatured(id: string, isFeatured: boolean): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "moderateReview",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 352,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 400,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review helpful count: ${updateReviewError.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 352,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'moderateReview' accepts data without validation",
          "snippet": "export async function moderateReview(id: string, status: ReviewStatus): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "voteReviewHelpful",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 356,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 400,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review helpful count: ${updateReviewError.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 356,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'voteReviewHelpful' accepts data without validation",
          "snippet": "export async function voteReviewHelpful(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getReviewByAppointmentId",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 184,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 184,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getReviewByAppointmentId' lacks proper error handling",
          "snippet": "export async function getReviewByAppointmentId(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 184,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getReviewVotes",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 209,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 209,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getReviewVotes' lacks proper error handling",
          "snippet": "export async function getReviewVotes(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 209,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getPendingReviews",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 277,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 277,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getPendingReviews' lacks proper error handling",
          "snippet": "export async function getPendingReviews(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 277,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "verifySalon",
      "file": "core/salons/dal/salons-mutations.ts",
      "startLine": 118,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 118,
          "severity": "critical",
          "type": "missing-auth",
          "description": "Function 'verifySalon' performs UPDATE without auth check",
          "snippet": "export async function verifySalon(id: string): Promise<void> {",
          "fix": "Add auth check at the beginning of the function"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 118,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'verifySalon' accepts data without validation",
          "snippet": "export async function verifySalon(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateSalonOperatingHours",
      "file": "core/salons/dal/salons-mutations.ts",
      "startLine": 137,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 173,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update salon settings: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 137,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateSalonOperatingHours' accepts data without validation",
          "snippet": "export async function updateSalonOperatingHours(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateSalonSettings",
      "file": "core/salons/dal/salons-mutations.ts",
      "startLine": 155,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 173,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update salon settings: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 155,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateSalonSettings' accepts data without validation",
          "snippet": "export async function updateSalonSettings(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateBusinessHours",
      "file": "core/salons/dal/salons-mutations.ts",
      "startLine": 180,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 214,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update business hours: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/salons/dal/salons-mutations.ts",
          "line": 180,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateBusinessHours' accepts data without validation",
          "snippet": "export async function updateBusinessHours(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getPublicSalons",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 14,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-queries.ts",
          "line": 14,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getPublicSalons' selects data without RLS or auth filtering",
          "snippet": "export async function getPublicSalons(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/salons/dal/salons-queries.ts",
          "line": 14,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "searchSalons",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 221,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-queries.ts",
          "line": 221,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'searchSalons' selects data without RLS or auth filtering",
          "snippet": "export async function searchSalons(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/salons/dal/salons-queries.ts",
          "line": 221,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffWorkingHours",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 205,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-queries.ts",
          "line": 205,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getStaffWorkingHours' lacks proper error handling",
          "snippet": "async function getStaffWorkingHours(staffId: string, dateRange: DateRange): Promise<WorkingHours[]> {",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/schedules/dal/schedules-queries.ts",
          "line": 205,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffAppointments",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 226,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-queries.ts",
          "line": 226,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getStaffAppointments' lacks proper error handling",
          "snippet": "async function getStaffAppointments(staffId: string, dateRange: DateRange) {",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/schedules/dal/schedules-queries.ts",
          "line": 226,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('id, start_time, end_time, status')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffBlockedTimes",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 240,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-queries.ts",
          "line": 240,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getStaffBlockedTimes' lacks proper error handling",
          "snippet": "async function getStaffBlockedTimes(staffId: string, dateRange: DateRange) {",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/schedules/dal/schedules-queries.ts",
          "line": 240,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getApprovedTimeOff",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 254,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-queries.ts",
          "line": 254,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getApprovedTimeOff' lacks proper error handling",
          "snippet": "async function getApprovedTimeOff(staffId: string, dateRange: DateRange) {",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/schedules/dal/schedules-queries.ts",
          "line": 254,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "checkRateLimit",
      "file": "core/security/dal/auth-verification.ts",
      "startLine": 406,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/security/dal/auth-verification.ts",
          "line": 406,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'checkRateLimit' lacks proper error handling",
          "snippet": "export async function checkRateLimit(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/security/dal/auth-verification.ts",
          "line": 406,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'checkRateLimit' accepts data without validation",
          "snippet": "export async function checkRateLimit(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getSecureAppointment",
      "file": "core/security/dal/secure-dal-patterns.ts",
      "startLine": 110,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/security/dal/secure-dal-patterns.ts",
          "line": 110,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getSecureAppointment' selects data without RLS or auth filtering",
          "snippet": "export async function getSecureAppointment(appointmentId: string) {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/security/dal/secure-dal-patterns.ts",
          "line": 110,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getSecureAppointment' lacks proper error handling",
          "snippet": "export async function getSecureAppointment(appointmentId: string) {",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "deleteService",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 62,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 77,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete service: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 62,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'deleteService' accepts data without validation",
          "snippet": "export async function deleteService(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "toggleServiceBookable",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 116,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 166,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update service price: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 116,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleServiceBookable' accepts data without validation",
          "snippet": "export async function toggleServiceBookable(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "deleteServiceCategory",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 303,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 318,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete service category: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 303,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'deleteServiceCategory' accepts data without validation",
          "snippet": "export async function deleteServiceCategory(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateStaffService",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 356,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 376,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update staff service: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 356,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateStaffService' accepts data without validation",
          "snippet": "export async function updateStaffService(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getPublicServices",
      "file": "core/services/dal/services-queries.ts",
      "startLine": 14,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-queries.ts",
          "line": 14,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getPublicServices' lacks proper error handling",
          "snippet": "export async function getPublicServices(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/services/dal/services-queries.ts",
          "line": 14,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getPublicServiceById",
      "file": "core/services/dal/services-queries.ts",
      "startLine": 161,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-queries.ts",
          "line": 161,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getPublicServiceById' selects data without RLS or auth filtering",
          "snippet": "export async function getPublicServiceById(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/services/dal/services-queries.ts",
          "line": 161,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getFeaturedServices",
      "file": "core/services/dal/services-queries.ts",
      "startLine": 251,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-queries.ts",
          "line": 251,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getFeaturedServices' selects data without RLS or auth filtering",
          "snippet": "export async function getFeaturedServices(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        },
        {
          "file": "core/services/dal/services-queries.ts",
          "line": 251,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "deleteStaffProfile",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 74,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 92,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete staff profile: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 74,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'deleteStaffProfile' accepts data without validation",
          "snippet": "export async function deleteStaffProfile(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "deleteStaffSchedule",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 185,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 200,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete staff schedule: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 185,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'deleteStaffSchedule' accepts data without validation",
          "snippet": "export async function deleteStaffSchedule(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateTimeOffRequest",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 236,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 254,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update time off request: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 236,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateTimeOffRequest' accepts data without validation",
          "snippet": "export async function updateTimeOffRequest(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateBlockedTime",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 418,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 436,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update blocked time: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 418,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateBlockedTime' accepts data without validation",
          "snippet": "export async function updateBlockedTime(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "removeBlockedTime",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 443,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 483,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update staff commission: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 443,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'removeBlockedTime' accepts data without validation",
          "snippet": "export async function removeBlockedTime(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateStaffCommission",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 465,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 483,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update staff commission: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        },
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 465,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateStaffCommission' accepts data without validation",
          "snippet": "export async function updateStaffCommission(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getStaffMemberByUserId",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 312,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 312,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getStaffMemberByUserId' lacks proper error handling",
          "snippet": "export async function getStaffMemberByUserId(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 312,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getTimeOffRequests",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 321,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 321,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getTimeOffRequests' lacks proper error handling",
          "snippet": "export async function getTimeOffRequests(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 321,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "searchStaffProfiles",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 356,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 356,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'searchStaffProfiles' lacks proper error handling",
          "snippet": "export async function searchStaffProfiles(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 356,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffMemberById",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 367,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 367,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getStaffMemberById' lacks proper error handling",
          "snippet": "export async function getStaffMemberById(id: string): Promise<StaffProfileWithRelations | null> {",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 367,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffBlockedTimes",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 374,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 374,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getStaffBlockedTimes' lacks proper error handling",
          "snippet": "export async function getStaffBlockedTimes(",
          "fix": "Wrap database operations in try-catch block"
        },
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 374,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "verifySuperAdmin",
      "file": "core/admin/dal/index.ts",
      "startLine": 25,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/admin/dal/index.ts",
          "line": 25,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'verifySuperAdmin' accepts data without validation",
          "snippet": "async function verifySuperAdmin() {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getAdminDashboardStats",
      "file": "core/admin/dal/index.ts",
      "startLine": 85,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/admin/dal/index.ts",
          "line": 85,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getAdminDashboardStats' selects data without RLS or auth filtering",
          "snippet": "export async function getAdminDashboardStats(): Promise<AdminDashboardStats> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        }
      ]
    },
    {
      "name": "getSystemHealthMetrics",
      "file": "core/admin/dal/index.ts",
      "startLine": 432,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/admin/dal/index.ts",
          "line": 432,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getSystemHealthMetrics' selects data without RLS or auth filtering",
          "snippet": "export async function getSystemHealthMetrics(): Promise<SystemHealthMetrics> {",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        }
      ]
    },
    {
      "name": "getAdminAuditLogs",
      "file": "core/admin/dal/index.ts",
      "startLine": 454,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/admin/dal/index.ts",
          "line": 454,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getAdminAuditLogs' selects data without RLS or auth filtering",
          "snippet": "export async function getAdminAuditLogs(filters: AdminFilters = {}): Promise<{",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        }
      ]
    },
    {
      "name": "updateStaffPerformance",
      "file": "core/analytics/dal/analytics-mutations.ts",
      "startLine": 46,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/analytics-mutations.ts",
          "line": 46,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "updateCustomerAnalytics",
      "file": "core/analytics/dal/analytics-mutations.ts",
      "startLine": 67,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/analytics-mutations.ts",
          "line": 67,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "updateServiceAnalytics",
      "file": "core/analytics/dal/analytics-mutations.ts",
      "startLine": 87,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/analytics-mutations.ts",
          "line": 87,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getAppointmentMetrics",
      "file": "core/analytics/dal/appointment-queries.ts",
      "startLine": 9,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/appointment-queries.ts",
          "line": 9,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getAppointmentMetrics' lacks proper error handling",
          "snippet": "export async function getAppointmentMetrics(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getAppointmentTrends",
      "file": "core/analytics/dal/appointment-queries.ts",
      "startLine": 39,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/appointment-queries.ts",
          "line": 39,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getAppointmentTrends' lacks proper error handling",
          "snippet": "export async function getAppointmentTrends(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getBookingHeatmap",
      "file": "core/analytics/dal/appointment-queries.ts",
      "startLine": 56,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/appointment-queries.ts",
          "line": 56,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getBookingHeatmap' lacks proper error handling",
          "snippet": "export async function getBookingHeatmap(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getAppointmentComparisons",
      "file": "core/analytics/dal/appointment-queries.ts",
      "startLine": 109,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/appointment-queries.ts",
          "line": 109,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getAppointmentComparisons' lacks proper error handling",
          "snippet": "export async function getAppointmentComparisons(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getAppointmentsByStatus",
      "file": "core/analytics/dal/appointment-queries.ts",
      "startLine": 160,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/appointment-queries.ts",
          "line": 160,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getAppointmentsByStatus' lacks proper error handling",
          "snippet": "export async function getAppointmentsByStatus(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getCustomerMetrics",
      "file": "core/analytics/dal/customer-queries.ts",
      "startLine": 9,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/customer-queries.ts",
          "line": 9,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getCustomerMetrics' lacks proper error handling",
          "snippet": "export async function getCustomerMetrics(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getCustomerTrends",
      "file": "core/analytics/dal/customer-queries.ts",
      "startLine": 144,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/customer-queries.ts",
          "line": 144,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getCustomerTrends' lacks proper error handling",
          "snippet": "export async function getCustomerTrends(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getTopCustomers",
      "file": "core/analytics/dal/customer-queries.ts",
      "startLine": 178,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/customer-queries.ts",
          "line": 178,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getTopCustomers' lacks proper error handling",
          "snippet": "export async function getTopCustomers(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getCustomerRetention",
      "file": "core/analytics/dal/customer-queries.ts",
      "startLine": 228,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/customer-queries.ts",
          "line": 228,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getCustomerRetention' lacks proper error handling",
          "snippet": "export async function getCustomerRetention(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getTrends",
      "file": "core/analytics/dal/platform-queries.ts",
      "startLine": 94,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/platform-queries.ts",
          "line": 94,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getTrends' lacks proper error handling",
          "snippet": "async function getTrends(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getRevenueMetrics",
      "file": "core/analytics/dal/revenue-queries.ts",
      "startLine": 9,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/revenue-queries.ts",
          "line": 9,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getRevenueMetrics' lacks proper error handling",
          "snippet": "export async function getRevenueMetrics(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getPreviousPeriodRevenue",
      "file": "core/analytics/dal/revenue-queries.ts",
      "startLine": 60,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/revenue-queries.ts",
          "line": 60,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getPreviousPeriodRevenue' lacks proper error handling",
          "snippet": "export async function getPreviousPeriodRevenue(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getRevenueAnalytics",
      "file": "core/analytics/dal/revenue-queries.ts",
      "startLine": 92,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/revenue-queries.ts",
          "line": 92,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getRevenueAnalytics' lacks proper error handling",
          "snippet": "export async function getRevenueAnalytics(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getRevenueTrends",
      "file": "core/analytics/dal/revenue-queries.ts",
      "startLine": 184,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/revenue-queries.ts",
          "line": 184,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getRevenueTrends' lacks proper error handling",
          "snippet": "export async function getRevenueTrends(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getServiceMetrics",
      "file": "core/analytics/dal/salon-queries.ts",
      "startLine": 9,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/salon-queries.ts",
          "line": 9,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getServiceMetrics' lacks proper error handling",
          "snippet": "export async function getServiceMetrics(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getSalonAnalytics",
      "file": "core/analytics/dal/salon-queries.ts",
      "startLine": 58,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/salon-queries.ts",
          "line": 58,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "compareSalons",
      "file": "core/analytics/dal/salon-queries.ts",
      "startLine": 159,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/salon-queries.ts",
          "line": 159,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'compareSalons' lacks proper error handling",
          "snippet": "export async function compareSalons(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getSalonOccupancy",
      "file": "core/analytics/dal/salon-queries.ts",
      "startLine": 212,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/salon-queries.ts",
          "line": 212,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getSalonOccupancy' lacks proper error handling",
          "snippet": "export async function getSalonOccupancy(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getSalonGrowth",
      "file": "core/analytics/dal/salon-queries.ts",
      "startLine": 264,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/salon-queries.ts",
          "line": 264,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getSalonGrowth' lacks proper error handling",
          "snippet": "export async function getSalonGrowth(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getTopPerformers",
      "file": "core/analytics/dal/staff-queries.ts",
      "startLine": 141,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/staff-queries.ts",
          "line": 141,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getTopPerformers' lacks proper error handling",
          "snippet": "export async function getTopPerformers(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getStaffUtilization",
      "file": "core/analytics/dal/staff-queries.ts",
      "startLine": 218,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/staff-queries.ts",
          "line": 218,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getStaffUtilization' lacks proper error handling",
          "snippet": "export async function getStaffUtilization(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getStaffRevenue",
      "file": "core/analytics/dal/staff-queries.ts",
      "startLine": 266,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/analytics/dal/staff-queries.ts",
          "line": 266,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getStaffRevenue' lacks proper error handling",
          "snippet": "export async function getStaffRevenue(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "addAppointmentNote",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 353,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/appointments/dal/appointments-mutations.ts",
          "line": 377,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "const updatedNotes = existingNotes ? `${existingNotes}\\n${newNote}` : newNote;",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "getStaffAppointments",
      "file": "core/appointments/dal/appointments-queries.ts",
      "startLine": 241,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/appointments/dal/appointments-queries.ts",
          "line": 241,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getCustomerAppointments",
      "file": "core/appointments/dal/appointments-queries.ts",
      "startLine": 277,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/appointments/dal/appointments-queries.ts",
          "line": 277,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getRequestContext",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 28,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/audit/dal/audit-commands.ts",
          "line": 28,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getRequestContext' lacks proper error handling",
          "snippet": "async function getRequestContext() {",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "logAuditEvent",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 39,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/audit/dal/audit-commands.ts",
          "line": 39,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'logAuditEvent' accepts data without validation",
          "snippet": "export async function logAuditEvent(input: CreateAuditEventInput) {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "logSecurityIncident",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 95,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/audit/dal/audit-commands.ts",
          "line": 95,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'logSecurityIncident' accepts data without validation",
          "snippet": "export async function logSecurityIncident(input: CreateSecurityIncidentInput) {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateSecurityIncident",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 143,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/audit/dal/audit-commands.ts",
          "line": 190,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "`[${new Date().toISOString()}] ${updates.investigationNotes}`,",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "logAccess",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 223,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/audit/dal/audit-commands.ts",
          "line": 223,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'logAccess' accepts data without validation",
          "snippet": "export async function logAccess(input: LogAccessInput) {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "to",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 361,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/audit/dal/audit-commands.ts",
          "line": 361,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'to' lacks proper error handling",
          "snippet": "// Helper function to calculate changes between old and new values",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "calculateChanges",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 362,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/audit/dal/audit-commands.ts",
          "line": 362,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'calculateChanges' lacks proper error handling",
          "snippet": "function calculateChanges(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "logBulkAuditEvents",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 383,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/audit/dal/audit-commands.ts",
          "line": 383,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'logBulkAuditEvents' accepts data without validation",
          "snippet": "export async function logBulkAuditEvents(events: CreateAuditEventInput[]) {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getBillingById",
      "file": "core/billing/dal/billing-queries.ts",
      "startLine": 70,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/billing/dal/billing-queries.ts",
          "line": 70,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getInvoicesByBilling",
      "file": "core/billing/dal/billing-queries.ts",
      "startLine": 89,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/billing/dal/billing-queries.ts",
          "line": 89,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getPaymentMethods",
      "file": "core/billing/dal/billing-queries.ts",
      "startLine": 122,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/billing/dal/billing-queries.ts",
          "line": 122,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getDefaultPaymentMethod",
      "file": "core/billing/dal/billing-queries.ts",
      "startLine": 144,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/billing/dal/billing-queries.ts",
          "line": 144,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getUnpaidInvoices",
      "file": "core/billing/dal/billing-queries.ts",
      "startLine": 244,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/billing/dal/billing-queries.ts",
          "line": 244,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"id\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getRevenueByDateRange",
      "file": "core/billing/dal/billing-queries.ts",
      "startLine": 290,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/billing/dal/billing-queries.ts",
          "line": 290,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"date, total_revenue\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSubscriptionsByCustomer",
      "file": "core/billing/dal/billing-queries.ts",
      "startLine": 321,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/billing/dal/billing-queries.ts",
          "line": 321,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getInvoiceById",
      "file": "core/billing/dal/billing-queries.ts",
      "startLine": 342,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/billing/dal/billing-queries.ts",
          "line": 342,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getPaymentMethods",
      "file": "core/billing/dal/index.ts",
      "startLine": 250,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/billing/dal/index.ts",
          "line": 250,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getRevenueAnalytics",
      "file": "core/billing/dal/index.ts",
      "startLine": 267,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/billing/dal/index.ts",
          "line": 267,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "updateBookingStatus",
      "file": "core/booking/dal/mutations.ts",
      "startLine": 122,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/booking/dal/mutations.ts",
          "line": 122,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateBookingStatus' accepts data without validation",
          "snippet": "export async function updateBookingStatus(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "rescheduleBooking",
      "file": "core/booking/dal/mutations.ts",
      "startLine": 176,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/booking/dal/mutations.ts",
          "line": 176,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'rescheduleBooking' accepts data without validation",
          "snippet": "export async function rescheduleBooking(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "cancelBooking",
      "file": "core/booking/dal/mutations.ts",
      "startLine": 238,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/booking/dal/mutations.ts",
          "line": 238,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'cancelBooking' accepts data without validation",
          "snippet": "export async function cancelBooking(appointmentId: string, reason: string) {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "markNoShow",
      "file": "core/booking/dal/mutations.ts",
      "startLine": 243,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/booking/dal/mutations.ts",
          "line": 243,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'markNoShow' accepts data without validation",
          "snippet": "export async function markNoShow(appointmentId: string) {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "checkInCustomer",
      "file": "core/booking/dal/mutations.ts",
      "startLine": 248,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/booking/dal/mutations.ts",
          "line": 248,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'checkInCustomer' accepts data without validation",
          "snippet": "export async function checkInCustomer(appointmentId: string) {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "completeAppointment",
      "file": "core/booking/dal/mutations.ts",
      "startLine": 253,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/booking/dal/mutations.ts",
          "line": 253,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'completeAppointment' accepts data without validation",
          "snippet": "export async function completeAppointment(appointmentId: string) {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "addToWaitingList",
      "file": "core/booking/dal/mutations.ts",
      "startLine": 258,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/booking/dal/mutations.ts",
          "line": 258,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'addToWaitingList' accepts data without validation",
          "snippet": "export async function addToWaitingList(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updatePaymentStatus",
      "file": "core/booking/dal/mutations.ts",
      "startLine": 398,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/booking/dal/mutations.ts",
          "line": 398,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updatePaymentStatus' accepts data without validation",
          "snippet": "export async function updatePaymentStatus(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "addAppointmentNotes",
      "file": "core/booking/dal/mutations.ts",
      "startLine": 446,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/booking/dal/mutations.ts",
          "line": 446,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'addAppointmentNotes' accepts data without validation",
          "snippet": "export async function addAppointmentNotes(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getAvailableServices",
      "file": "core/booking/dal/queries.ts",
      "startLine": 22,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/booking/dal/queries.ts",
          "line": 22,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(`",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getServiceCategories",
      "file": "core/booking/dal/queries.ts",
      "startLine": 54,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/booking/dal/queries.ts",
          "line": 54,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffSchedules",
      "file": "core/booking/dal/queries.ts",
      "startLine": 115,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/booking/dal/queries.ts",
          "line": 115,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "addToFavorites",
      "file": "core/customer/dal/favorites.ts",
      "startLine": 85,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/customer/dal/favorites.ts",
          "line": 119,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "insertData[`${type}_id`] = itemId",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "removeFromFavorites",
      "file": "core/customer/dal/favorites.ts",
      "startLine": 194,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/customer/dal/favorites.ts",
          "line": 237,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update notes: ${error.message}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "updateFavoriteNotes",
      "file": "core/customer/dal/favorites.ts",
      "startLine": 217,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/customer/dal/favorites.ts",
          "line": 237,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update notes: ${error.message}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "markAllNotificationsAsRead",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 97,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/customer/dal/notifications.ts",
          "line": 139,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete notification: ${error.message}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "deleteNotification",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 120,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/customer/dal/notifications.ts",
          "line": 139,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete notification: ${error.message}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "updateNotificationPreferences",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 245,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "UPSERT"
      ],
      "issues": [
        {
          "file": "core/customer/dal/notifications.ts",
          "line": 292,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update notification preferences: ${error.message}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "createNotification",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 298,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/customer/dal/notifications.ts",
          "line": 298,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'createNotification' accepts data without validation",
          "snippet": "export async function createNotification(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateCustomerProfile",
      "file": "core/customer/dal/profile.ts",
      "startLine": 52,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/customer/dal/profile.ts",
          "line": 80,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update profile: ${error.message}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "updateCustomerPreferences",
      "file": "core/customer/dal/profile.ts",
      "startLine": 99,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/customer/dal/profile.ts",
          "line": 122,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update preferences: ${error.message}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "uploadProfileImage",
      "file": "core/customer/dal/profile.ts",
      "startLine": 128,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/customer/dal/profile.ts",
          "line": 170,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update profile image: ${updateError.message}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "deleteCustomerAccount",
      "file": "core/customer/dal/profile.ts",
      "startLine": 176,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/customer/dal/profile.ts",
          "line": 194,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete account: ${error.message}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "deleteReview",
      "file": "core/customer/dal/reviews.ts",
      "startLine": 447,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/customer/dal/reviews.ts",
          "line": 466,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete review: ${error.message}`)",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "toggleFavorite",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 108,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/customers/dal/customers-mutations.ts",
          "line": 150,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to remove favorite: ${deleteError.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "getCustomers",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 16,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/customers/dal/customers-queries.ts",
          "line": 16,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getCustomerById",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 63,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/customers/dal/customers-queries.ts",
          "line": 63,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "deleteFavorite",
      "file": "core/favorites/dal/favorites-mutations.ts",
      "startLine": 51,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/favorites/dal/favorites-mutations.ts",
          "line": 51,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "toggleFavorite",
      "file": "core/favorites/dal/favorites-mutations.ts",
      "startLine": 67,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/favorites/dal/favorites-mutations.ts",
          "line": 67,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "createProduct",
      "file": "core/inventory/dal/product-mutations.ts",
      "startLine": 11,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/product-mutations.ts",
          "line": 11,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'createProduct' accepts data without validation",
          "snippet": "export async function createProduct(salonId: string, data: ProductFormData): Promise<Product> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateProduct",
      "file": "core/inventory/dal/product-mutations.ts",
      "startLine": 31,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/product-mutations.ts",
          "line": 31,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateProduct' accepts data without validation",
          "snippet": "export async function updateProduct(id: string, data: Partial<ProductFormData>): Promise<Product> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "deleteProduct",
      "file": "core/inventory/dal/product-mutations.ts",
      "startLine": 52,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/product-mutations.ts",
          "line": 52,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'deleteProduct' accepts data without validation",
          "snippet": "export async function deleteProduct(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "createCategory",
      "file": "core/inventory/dal/product-mutations.ts",
      "startLine": 69,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/product-mutations.ts",
          "line": 69,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'createCategory' accepts data without validation",
          "snippet": "export async function createCategory(salonId: string, data: CategoryFormData): Promise<ProductCategory> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateCategory",
      "file": "core/inventory/dal/product-mutations.ts",
      "startLine": 89,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/product-mutations.ts",
          "line": 89,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateCategory' accepts data without validation",
          "snippet": "export async function updateCategory(id: string, data: Partial<CategoryFormData>): Promise<ProductCategory> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "createPurchaseOrder",
      "file": "core/inventory/dal/purchase-order-mutations.ts",
      "startLine": 10,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/purchase-order-mutations.ts",
          "line": 10,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'createPurchaseOrder' accepts data without validation",
          "snippet": "export async function createPurchaseOrder(salonId: string, data: PurchaseOrderFormData): Promise<PurchaseOrder> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updatePurchaseOrder",
      "file": "core/inventory/dal/purchase-order-mutations.ts",
      "startLine": 60,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/purchase-order-mutations.ts",
          "line": 60,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updatePurchaseOrder' accepts data without validation",
          "snippet": "export async function updatePurchaseOrder(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updatePurchaseOrderStatus",
      "file": "core/inventory/dal/purchase-order-mutations.ts",
      "startLine": 93,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/purchase-order-mutations.ts",
          "line": 93,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updatePurchaseOrderStatus' accepts data without validation",
          "snippet": "export async function updatePurchaseOrderStatus(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "receivePurchaseOrderItem",
      "file": "core/inventory/dal/purchase-order-mutations.ts",
      "startLine": 124,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/purchase-order-mutations.ts",
          "line": 124,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'receivePurchaseOrderItem' accepts data without validation",
          "snippet": "export async function receivePurchaseOrderItem(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getProducts",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 19,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 19,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getProductById",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 58,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 58,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getProductBySku",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 78,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 78,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getCategories",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 101,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 101,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getCategoryById",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 118,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 118,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSuppliers",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 140,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 140,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSupplierById",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 157,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 157,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStockLocations",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 179,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 179,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getDefaultStockLocation",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 196,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 196,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStockLevels",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 219,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 219,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStockLevelById",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 244,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 244,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getLowStockProducts",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 265,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 265,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getPurchaseOrders",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 285,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 285,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getPurchaseOrderById",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 321,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 321,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStockAlerts",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 392,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 392,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getActiveAlerts",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 428,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/queries.ts",
          "line": 428,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('id')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "createStockLocation",
      "file": "core/inventory/dal/stock-mutations.ts",
      "startLine": 12,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/stock-mutations.ts",
          "line": 12,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'createStockLocation' accepts data without validation",
          "snippet": "export async function createStockLocation(salonId: string, data: StockLocationFormData): Promise<StockLocation> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateStockLocation",
      "file": "core/inventory/dal/stock-mutations.ts",
      "startLine": 40,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/stock-mutations.ts",
          "line": 40,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateStockLocation' accepts data without validation",
          "snippet": "export async function updateStockLocation(id: string, data: Partial<StockLocationFormData>): Promise<StockLocation> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "transferStock",
      "file": "core/inventory/dal/stock-mutations.ts",
      "startLine": 151,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/stock-mutations.ts",
          "line": 151,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'transferStock' accepts data without validation",
          "snippet": "export async function transferStock(data: StockTransferData): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "resolveStockAlert",
      "file": "core/inventory/dal/stock-mutations.ts",
      "startLine": 195,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/stock-mutations.ts",
          "line": 195,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'resolveStockAlert' accepts data without validation",
          "snippet": "export async function resolveStockAlert(alertId: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "createStockAlert",
      "file": "core/inventory/dal/stock-mutations.ts",
      "startLine": 214,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/stock-mutations.ts",
          "line": 214,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'createStockAlert' accepts data without validation",
          "snippet": "export async function createStockAlert(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "createSupplier",
      "file": "core/inventory/dal/supplier-mutations.ts",
      "startLine": 9,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/supplier-mutations.ts",
          "line": 9,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'createSupplier' accepts data without validation",
          "snippet": "export async function createSupplier(salonId: string, data: SupplierFormData): Promise<Supplier> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateSupplier",
      "file": "core/inventory/dal/supplier-mutations.ts",
      "startLine": 29,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/inventory/dal/supplier-mutations.ts",
          "line": 29,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateSupplier' accepts data without validation",
          "snippet": "export async function updateSupplier(id: string, data: Partial<SupplierFormData>): Promise<Supplier> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getLoyaltyProgram",
      "file": "core/loyalty/dal/loyalty.ts",
      "startLine": 22,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/loyalty.ts",
          "line": 22,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "updateLoyaltyProgram",
      "file": "core/loyalty/dal/loyalty.ts",
      "startLine": 112,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/loyalty.ts",
          "line": 137,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update loyalty program: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "getCustomerLoyalty",
      "file": "core/loyalty/dal/loyalty.ts",
      "startLine": 162,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/loyalty.ts",
          "line": 162,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "updateCustomerLoyalty",
      "file": "core/loyalty/dal/loyalty.ts",
      "startLine": 250,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/loyalty.ts",
          "line": 272,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update customer loyalty: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "updateLoyaltyProgram",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 55,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/mutations.ts",
          "line": 91,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "if (error) throw new Error(`Failed to update loyalty program: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "deleteLoyaltyProgram",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 99,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/mutations.ts",
          "line": 130,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "if (error) throw new Error(`Failed to delete loyalty program: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "unenrollCustomer",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 176,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE",
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/mutations.ts",
          "line": 216,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "if (error) throw new Error(`Failed to update customer loyalty: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "updateCustomerLoyalty",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 196,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/mutations.ts",
          "line": 216,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "if (error) throw new Error(`Failed to update customer loyalty: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "deleteLoyaltyTier",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 542,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "DELETE"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/mutations.ts",
          "line": 554,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "if (error) throw new Error(`Failed to delete tier: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "getLoyaltyProgram",
      "file": "core/loyalty/dal/queries.ts",
      "startLine": 18,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/queries.ts",
          "line": 18,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getCustomerLoyalty",
      "file": "core/loyalty/dal/queries.ts",
      "startLine": 61,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/queries.ts",
          "line": 61,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getCustomerTransactions",
      "file": "core/loyalty/dal/queries.ts",
      "startLine": 166,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/queries.ts",
          "line": 166,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\", { count: \"exact\", head: true })",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getLoyaltyTransactions",
      "file": "core/loyalty/dal/queries.ts",
      "startLine": 405,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/queries.ts",
          "line": 405,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"role, salon_id\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getCustomerRewards",
      "file": "core/loyalty/dal/queries.ts",
      "startLine": 556,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/queries.ts",
          "line": 556,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getLoyaltyTiers",
      "file": "core/loyalty/dal/queries.ts",
      "startLine": 572,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/loyalty/dal/queries.ts",
          "line": 572,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "createReview",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 14,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 58,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update review: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "addReviewResponse",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 109,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 109,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'addReviewResponse' accepts data without validation",
          "snippet": "export async function addReviewResponse(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "toggleReviewFeatured",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 139,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 139,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleReviewFeatured' accepts data without validation",
          "snippet": "export async function toggleReviewFeatured(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "updateReviewResponse",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 172,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 172,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'updateReviewResponse' accepts data without validation",
          "snippet": "export async function updateReviewResponse(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "removeReviewResponse",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 179,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 179,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'removeReviewResponse' accepts data without validation",
          "snippet": "export async function removeReviewResponse(reviewId: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "toggleReviewVerified",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 202,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 202,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleReviewVerified' accepts data without validation",
          "snippet": "export async function toggleReviewVerified(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "flagReview",
      "file": "core/reviews/dal/reviews-mutations.ts",
      "startLine": 278,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-mutations.ts",
          "line": 278,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'flagReview' accepts data without validation",
          "snippet": "export async function flagReview(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getReviews",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 13,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 13,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getReviewById",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 100,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/reviews/dal/reviews-queries.ts",
          "line": 100,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getReviewById' selects data without RLS or auth filtering",
          "snippet": "export async function getReviewById(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        }
      ]
    },
    {
      "name": "getSalons",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 53,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-queries.ts",
          "line": 53,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSalonById",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 110,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-queries.ts",
          "line": 110,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSalonBySlug",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 141,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-queries.ts",
          "line": 141,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getSalonBySlug' selects data without RLS or auth filtering",
          "snippet": "export async function getSalonBySlug(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        }
      ]
    },
    {
      "name": "getFeaturedSalons",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 167,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-queries.ts",
          "line": 167,
          "severity": "high",
          "type": "no-rls-check",
          "description": "Function 'getFeaturedSalons' selects data without RLS or auth filtering",
          "snippet": "export async function getFeaturedSalons(",
          "fix": "Add .eq() filter for user_id or appropriate RLS check"
        }
      ]
    },
    {
      "name": "getSalonsByChain",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 192,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-queries.ts",
          "line": 192,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSalonStaff",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 339,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-queries.ts",
          "line": 339,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('id, user_id, title, bio, specializations, profile_image_url, rating_average, is_bookable')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSalonServices",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 362,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-queries.ts",
          "line": 362,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getSalonCustomerAnalytics",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 428,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/salons/dal/salons-queries.ts",
          "line": 428,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('customer_id')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "bookDifferentResource",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 466,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 466,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'bookDifferentResource' lacks proper error handling",
          "snippet": "function bookDifferentResource(_parameters: Record<string, unknown>): Promise<{ success: boolean; newConflicts: ScheduleConflict[] }> {",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "calculateCurrentMetrics",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 471,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-mutations.ts",
          "line": 471,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'calculateCurrentMetrics' lacks proper error handling",
          "snippet": "async function calculateCurrentMetrics(salonId: string, _dateRange: DateRange): Promise<OptimizationMetrics> {",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "getDayOfWeek",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 353,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-queries.ts",
          "line": 353,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'getDayOfWeek' lacks proper error handling",
          "snippet": "function getDayOfWeek(date: Date): DayOfWeek {",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "checkDoubleBookings",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 358,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/schedules/dal/schedules-queries.ts",
          "line": 358,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'checkDoubleBookings' lacks proper error handling",
          "snippet": "async function checkDoubleBookings(staffId: string, startTime: Date, endTime: Date): Promise<string[]> {",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "verifyResourceAccess",
      "file": "core/security/dal/auth-verification.ts",
      "startLine": 210,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/security/dal/auth-verification.ts",
          "line": 210,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'verifyResourceAccess' lacks proper error handling",
          "snippet": "export async function verifyResourceAccess(",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "logSecurityEvent",
      "file": "core/security/dal/auth-verification.ts",
      "startLine": 382,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/security/dal/auth-verification.ts",
          "line": 382,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'logSecurityEvent' accepts data without validation",
          "snippet": "async function logSecurityEvent(entry: SecurityAuditEntry): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "createSecureAppointment",
      "file": "core/security/dal/secure-dal-patterns.ts",
      "startLine": 195,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/security/dal/secure-dal-patterns.ts",
          "line": 195,
          "severity": "medium",
          "type": "no-error-handling",
          "description": "Function 'createSecureAppointment' lacks proper error handling",
          "snippet": "export async function createSecureAppointment(appointmentData: any) {",
          "fix": "Wrap database operations in try-catch block"
        }
      ]
    },
    {
      "name": "is",
      "file": "core/security/dal/security-logging.ts",
      "startLine": 28,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/security/dal/security-logging.ts",
          "line": 28,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'is' accepts data without validation",
          "snippet": "* This function is designed to never throw - failures are logged to console",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "logSecurityEvent",
      "file": "core/security/dal/security-logging.ts",
      "startLine": 30,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/security/dal/security-logging.ts",
          "line": 30,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'logSecurityEvent' accepts data without validation",
          "snippet": "export async function logSecurityEvent(event: SecurityEvent): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "notifySecurityTeam",
      "file": "core/security/dal/security-logging.ts",
      "startLine": 73,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/security/dal/security-logging.ts",
          "line": 73,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'notifySecurityTeam' accepts data without validation",
          "snippet": "async function notifySecurityTeam(event: SecurityEvent): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "createService",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 11,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 55,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update service: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "toggleServiceFeatured",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 84,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 84,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleServiceFeatured' accepts data without validation",
          "snippet": "export async function toggleServiceFeatured(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "duplicateService",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 199,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 199,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "bulkUpdateServices",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 236,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 236,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'bulkUpdateServices' accepts data without validation",
          "snippet": "export async function bulkUpdateServices(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "bulkDeleteServices",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 255,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 255,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'bulkDeleteServices' accepts data without validation",
          "snippet": "export async function bulkDeleteServices(ids: string[]): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "createServiceCategory",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 272,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 318,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to delete service category: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "assignServiceToStaff",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 325,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-mutations.ts",
          "line": 325,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'assignServiceToStaff' accepts data without validation",
          "snippet": "export async function assignServiceToStaff(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "getServices",
      "file": "core/services/dal/services-queries.ts",
      "startLine": 81,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-queries.ts",
          "line": 81,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\");",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getServiceById",
      "file": "core/services/dal/services-queries.ts",
      "startLine": 189,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-queries.ts",
          "line": 189,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getServicesByCategory",
      "file": "core/services/dal/services-queries.ts",
      "startLine": 220,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-queries.ts",
          "line": 220,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "searchServices",
      "file": "core/services/dal/services-queries.ts",
      "startLine": 265,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-queries.ts",
          "line": 265,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getServiceCategories",
      "file": "core/services/dal/services-queries.ts",
      "startLine": 280,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/services/dal/services-queries.ts",
          "line": 280,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "updateStaffProfile",
      "file": "core/staff/dal/index.ts",
      "startLine": 118,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/index.ts",
          "line": 118,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select()",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "deleteStaffProfile",
      "file": "core/staff/dal/index.ts",
      "startLine": 138,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/index.ts",
          "line": 138,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffSchedules",
      "file": "core/staff/dal/index.ts",
      "startLine": 158,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/index.ts",
          "line": 158,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "denyTimeOffRequest",
      "file": "core/staff/dal/index.ts",
      "startLine": 318,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/index.ts",
          "line": 318,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select()",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffPerformance",
      "file": "core/staff/dal/index.ts",
      "startLine": 342,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/index.ts",
          "line": 342,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "updateStaffService",
      "file": "core/staff/dal/index.ts",
      "startLine": 437,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/index.ts",
          "line": 437,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select()",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "removeServiceFromStaff",
      "file": "core/staff/dal/index.ts",
      "startLine": 457,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/index.ts",
          "line": 457,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "checkStaffAvailability",
      "file": "core/staff/dal/index.ts",
      "startLine": 476,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/index.ts",
          "line": 476,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select('*')",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "createStaffProfile",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 20,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 67,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update staff profile: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "toggleStaffBookable",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 99,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 99,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleStaffBookable' accepts data without validation",
          "snippet": "export async function toggleStaffBookable(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "createStaffSchedule",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 131,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 178,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update staff schedule: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "createTimeOffRequest",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 207,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 254,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update time off request: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "approveTimeOffRequest",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 261,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 261,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'approveTimeOffRequest' accepts data without validation",
          "snippet": "export async function approveTimeOffRequest(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "rejectTimeOffRequest",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 290,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 290,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'rejectTimeOffRequest' accepts data without validation",
          "snippet": "export async function rejectTimeOffRequest(",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "toggleStaffFeatured",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 326,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 326,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'toggleStaffFeatured' accepts data without validation",
          "snippet": "export async function toggleStaffFeatured(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "deactivateStaffMember",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 358,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 358,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'deactivateStaffMember' accepts data without validation",
          "snippet": "export async function deactivateStaffMember(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "cancelTimeOffRequest",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 365,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 365,
          "severity": "medium",
          "type": "missing-validation",
          "description": "Function 'cancelTimeOffRequest' accepts data without validation",
          "snippet": "export async function cancelTimeOffRequest(id: string): Promise<void> {",
          "fix": "Add input validation using Zod or similar validation library"
        }
      ]
    },
    {
      "name": "createBlockedTime",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 387,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-mutations.ts",
          "line": 436,
          "severity": "critical",
          "type": "sql-injection",
          "description": "Potential SQL injection via string interpolation",
          "snippet": "throw new Error(`Failed to update blocked time: ${error.message}`);",
          "fix": "Use parameterized queries instead of string interpolation"
        }
      ]
    },
    {
      "name": "getStaffMembers",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 22,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 22,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffProfiles",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 31,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 31,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffProfileById",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 87,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 87,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffProfileByUserId",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 117,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 117,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getActiveStaffBySalon",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 147,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 147,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getBookableStaffBySalon",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 175,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 175,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getFeaturedStaff",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 204,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 204,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffSchedules",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 217,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 217,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffServices",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 245,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 245,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffPerformance",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 273,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 273,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getAvailableStaffForService",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 408,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 408,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"staff_id\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getStaffById",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 453,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/staff/dal/staff-queries.ts",
          "line": 453,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getUsers",
      "file": "core/users/dal/users-queries.ts",
      "startLine": 20,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/users/dal/users-queries.ts",
          "line": 20,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getUserById",
      "file": "core/users/dal/users-queries.ts",
      "startLine": 76,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/users/dal/users-queries.ts",
          "line": 76,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getCurrentUser",
      "file": "core/users/dal/users-queries.ts",
      "startLine": 112,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/users/dal/users-queries.ts",
          "line": 112,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getUsersWithRoles",
      "file": "core/users/dal/users-queries.ts",
      "startLine": 134,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/users/dal/users-queries.ts",
          "line": 134,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"*\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getUserSecuritySettings",
      "file": "core/users/dal/users-queries.ts",
      "startLine": 251,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": [
        {
          "file": "core/users/dal/users-queries.ts",
          "line": 251,
          "severity": "high",
          "type": "data-exposure",
          "description": "Selecting all columns without limit may expose sensitive data",
          "snippet": ".select(\"password_changed_at, metadata\")",
          "fix": "Select only needed columns and add .limit() to prevent data exposure"
        }
      ]
    },
    {
      "name": "getPlatformUsers",
      "file": "core/admin/dal/index.ts",
      "startLine": 185,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getPlatformSalons",
      "file": "core/admin/dal/index.ts",
      "startLine": 301,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "safeAnalyticsQuery",
      "file": "core/analytics/dal/analytics-adapter.ts",
      "startLine": 43,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "queryCustomerAnalytics",
      "file": "core/analytics/dal/analytics-adapter.ts",
      "startLine": 61,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "queryDailyMetrics",
      "file": "core/analytics/dal/analytics-adapter.ts",
      "startLine": 76,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "aggregateAppointmentRevenue",
      "file": "core/analytics/dal/analytics-adapter.ts",
      "startLine": 106,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "isQueryError",
      "file": "core/analytics/dal/analytics-adapter.ts",
      "startLine": 123,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "transformAnalyticsData",
      "file": "core/analytics/dal/analytics-adapter.ts",
      "startLine": 133,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "verifyAnalyticsAuth",
      "file": "core/analytics/dal/analytics-helpers.ts",
      "startLine": 37,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "calculateDaysBetween",
      "file": "core/analytics/dal/analytics-helpers.ts",
      "startLine": 60,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getPreviousPeriodRange",
      "file": "core/analytics/dal/analytics-helpers.ts",
      "startLine": 75,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "refreshDailyMetrics",
      "file": "core/analytics/dal/analytics-mutations.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "refreshMonthlyMetrics",
      "file": "core/analytics/dal/analytics-mutations.ts",
      "startLine": 25,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "generateAnalyticsReport",
      "file": "core/analytics/dal/analytics-mutations.ts",
      "startLine": 104,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "exportAnalyticsData",
      "file": "core/analytics/dal/analytics-mutations.ts",
      "startLine": 116,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getDashboardMetrics",
      "file": "core/analytics/dal/platform-queries.ts",
      "startLine": 14,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getComparisons",
      "file": "core/analytics/dal/platform-queries.ts",
      "startLine": 158,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "calculateTrend",
      "file": "core/analytics/dal/salon-queries.ts",
      "startLine": 311,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getStaffPerformance",
      "file": "core/analytics/dal/staff-queries.ts",
      "startLine": 58,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "createAppointment",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 12,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "updateAppointment",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 44,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "cancelAppointment",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 73,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "confirmAppointment",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 102,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "checkInAppointment",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 128,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "completeAppointment",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 156,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "noShowAppointment",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 185,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "addAppointmentServices",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 213,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "DELETE"
      ],
      "issues": []
    },
    {
      "name": "removeAppointmentService",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 242,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "DELETE"
      ],
      "issues": []
    },
    {
      "name": "addAppointmentService",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 264,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "rescheduleAppointment",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 286,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "updateAppointmentPayment",
      "file": "core/appointments/dal/appointments-mutations.ts",
      "startLine": 321,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "getAppointments",
      "file": "core/appointments/dal/appointments-queries.ts",
      "startLine": 12,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getAppointmentById",
      "file": "core/appointments/dal/appointments-queries.ts",
      "startLine": 87,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getUpcomingAppointments",
      "file": "core/appointments/dal/appointments-queries.ts",
      "startLine": 148,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getAppointmentsByDateRange",
      "file": "core/appointments/dal/appointments-queries.ts",
      "startLine": 192,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getAppointmentStats",
      "file": "core/appointments/dal/appointments-queries.ts",
      "startLine": 310,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "checkAvailability",
      "file": "core/appointments/dal/appointments-queries.ts",
      "startLine": 337,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getAppointmentsByDate",
      "file": "core/appointments/dal/appointments-queries.ts",
      "startLine": 364,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getCustomerUpcomingAppointments",
      "file": "core/appointments/dal/appointments-queries.ts",
      "startLine": 380,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getStaffDayAppointments",
      "file": "core/appointments/dal/appointments-queries.ts",
      "startLine": 387,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "verifyAuth",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 13,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "to",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 268,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "logAuthEvent",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 269,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "to",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 292,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "logDataOperation",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 293,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "to",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 321,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "logPermissionChange",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 322,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "cleanupOldAuditLogs",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 439,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "RPC"
      ],
      "issues": []
    },
    {
      "name": "const",
      "file": "core/audit/dal/audit-commands.ts",
      "startLine": 453,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "RPC"
      ],
      "issues": []
    },
    {
      "name": "verifyAuth",
      "file": "core/audit/dal/audit-queries.ts",
      "startLine": 19,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "verifyAdminAuth",
      "file": "core/audit/dal/audit-queries.ts",
      "startLine": 34,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "logAuditEvent",
      "file": "core/audit-logs/dal/audit-logs-mutations.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "logDataChange",
      "file": "core/audit-logs/dal/audit-logs-mutations.ts",
      "startLine": 31,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "reportSecurityIncident",
      "file": "core/audit-logs/dal/audit-logs-mutations.ts",
      "startLine": 66,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "resolveSecurityIncident",
      "file": "core/audit-logs/dal/audit-logs-mutations.ts",
      "startLine": 99,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "logBulkOperation",
      "file": "core/audit-logs/dal/audit-logs-mutations.ts",
      "startLine": 119,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "logAuthenticationEvent",
      "file": "core/audit-logs/dal/audit-logs-mutations.ts",
      "startLine": 158,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "logPermissionChange",
      "file": "core/audit-logs/dal/audit-logs-mutations.ts",
      "startLine": 194,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "exportAuditLogsData",
      "file": "core/audit-logs/dal/audit-logs-mutations.ts",
      "startLine": 236,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getAuditEvents",
      "file": "core/audit-logs/dal/audit-logs-queries.ts",
      "startLine": 15,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getAuditEventById",
      "file": "core/audit-logs/dal/audit-logs-queries.ts",
      "startLine": 28,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getDataChanges",
      "file": "core/audit-logs/dal/audit-logs-queries.ts",
      "startLine": 41,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getSecurityIncidents",
      "file": "core/audit-logs/dal/audit-logs-queries.ts",
      "startLine": 54,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getAuditStats",
      "file": "core/audit-logs/dal/audit-logs-queries.ts",
      "startLine": 67,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getUserActivity",
      "file": "core/audit-logs/dal/audit-logs-queries.ts",
      "startLine": 86,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getEntityHistory",
      "file": "core/audit-logs/dal/audit-logs-queries.ts",
      "startLine": 100,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getFailedLoginAttempts",
      "file": "core/audit-logs/dal/audit-logs-queries.ts",
      "startLine": 114,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getRecentDataChanges",
      "file": "core/audit-logs/dal/audit-logs-queries.ts",
      "startLine": 128,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getActiveIncidents",
      "file": "core/audit-logs/dal/audit-logs-queries.ts",
      "startLine": 141,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "searchAuditLogs",
      "file": "core/audit-logs/dal/audit-logs-queries.ts",
      "startLine": 152,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "exportAuditLogs",
      "file": "core/audit-logs/dal/audit-logs-queries.ts",
      "startLine": 166,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "createBilling",
      "file": "core/billing/dal/billing-mutations.ts",
      "startLine": 10,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updateBilling",
      "file": "core/billing/dal/billing-mutations.ts",
      "startLine": 30,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deleteBilling",
      "file": "core/billing/dal/billing-mutations.ts",
      "startLine": 46,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "processPayment",
      "file": "core/billing/dal/billing-mutations.ts",
      "startLine": 58,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "refundPayment",
      "file": "core/billing/dal/billing-mutations.ts",
      "startLine": 74,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "createInvoice",
      "file": "core/billing/dal/billing-mutations.ts",
      "startLine": 90,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "addPaymentMethod",
      "file": "core/billing/dal/billing-mutations.ts",
      "startLine": 103,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "removePaymentMethod",
      "file": "core/billing/dal/billing-mutations.ts",
      "startLine": 129,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "setDefaultPaymentMethod",
      "file": "core/billing/dal/billing-mutations.ts",
      "startLine": 143,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "retryFailedPayment",
      "file": "core/billing/dal/billing-mutations.ts",
      "startLine": 159,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getBillings",
      "file": "core/billing/dal/billing-queries.ts",
      "startLine": 11,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getBillingStats",
      "file": "core/billing/dal/billing-queries.ts",
      "startLine": 166,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getMonthlyRecurringRevenue",
      "file": "core/billing/dal/billing-queries.ts",
      "startLine": 370,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getInvoices",
      "file": "core/billing/dal/index.ts",
      "startLine": 16,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getInvoiceById",
      "file": "core/billing/dal/index.ts",
      "startLine": 60,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "createInvoice",
      "file": "core/billing/dal/index.ts",
      "startLine": 84,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "updateInvoiceStatus",
      "file": "core/billing/dal/index.ts",
      "startLine": 145,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "recordPayment",
      "file": "core/billing/dal/index.ts",
      "startLine": 180,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "generateRevenueReport",
      "file": "core/billing/dal/index.ts",
      "startLine": 289,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "calculateInvoiceTotal",
      "file": "core/billing/dal/index.ts",
      "startLine": 440,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "calculateTaxAmount",
      "file": "core/billing/dal/index.ts",
      "startLine": 450,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "calculateDiscountAmount",
      "file": "core/billing/dal/index.ts",
      "startLine": 460,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "createRecurringBookings",
      "file": "core/booking/dal/mutations.ts",
      "startLine": 297,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "createGroupBooking",
      "file": "core/booking/dal/mutations.ts",
      "startLine": 354,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getAvailableStaff",
      "file": "core/booking/dal/queries.ts",
      "startLine": 78,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getExistingAppointments",
      "file": "core/booking/dal/queries.ts",
      "startLine": 146,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getAvailableTimeSlots",
      "file": "core/booking/dal/queries.ts",
      "startLine": 192,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getBookings",
      "file": "core/booking/dal/queries.ts",
      "startLine": 280,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getBookingById",
      "file": "core/booking/dal/queries.ts",
      "startLine": 352,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getWaitingList",
      "file": "core/booking/dal/queries.ts",
      "startLine": 398,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getCapacityInfo",
      "file": "core/booking/dal/queries.ts",
      "startLine": 419,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getBookingAnalytics",
      "file": "core/booking/dal/queries.ts",
      "startLine": 463,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "createCampaign",
      "file": "core/campaigns/dal/campaigns-mutations.ts",
      "startLine": 12,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "updateCampaign",
      "file": "core/campaigns/dal/campaigns-mutations.ts",
      "startLine": 63,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "deleteCampaign",
      "file": "core/campaigns/dal/campaigns-mutations.ts",
      "startLine": 119,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "updateCampaignStatus",
      "file": "core/campaigns/dal/campaigns-mutations.ts",
      "startLine": 166,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "sendCampaign",
      "file": "core/campaigns/dal/campaigns-mutations.ts",
      "startLine": 228,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "sendTestCampaign",
      "file": "core/campaigns/dal/campaigns-mutations.ts",
      "startLine": 274,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "duplicateCampaign",
      "file": "core/campaigns/dal/campaigns-mutations.ts",
      "startLine": 317,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "saveCampaignTemplate",
      "file": "core/campaigns/dal/campaigns-mutations.ts",
      "startLine": 354,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "deleteCampaignTemplate",
      "file": "core/campaigns/dal/campaigns-mutations.ts",
      "startLine": 401,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "scheduleCampaign",
      "file": "core/campaigns/dal/campaigns-mutations.ts",
      "startLine": 433,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "pauseCampaign",
      "file": "core/campaigns/dal/campaigns-mutations.ts",
      "startLine": 478,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "testCampaign",
      "file": "core/campaigns/dal/campaigns-mutations.ts",
      "startLine": 519,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCampaigns",
      "file": "core/campaigns/dal/campaigns-queries.ts",
      "startLine": 18,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCampaignById",
      "file": "core/campaigns/dal/campaigns-queries.ts",
      "startLine": 155,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCampaignTemplates",
      "file": "core/campaigns/dal/campaigns-queries.ts",
      "startLine": 183,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getAudiencePreview",
      "file": "core/campaigns/dal/campaigns-queries.ts",
      "startLine": 293,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCampaignAnalytics",
      "file": "core/campaigns/dal/campaigns-queries.ts",
      "startLine": 383,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getCampaignStats",
      "file": "core/campaigns/dal/campaigns-queries.ts",
      "startLine": 471,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerAppointments",
      "file": "core/customer/dal/appointments.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getUpcomingAppointments",
      "file": "core/customer/dal/appointments.ts",
      "startLine": 142,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getRecentAppointments",
      "file": "core/customer/dal/appointments.ts",
      "startLine": 158,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getAppointmentDetails",
      "file": "core/customer/dal/appointments.ts",
      "startLine": 174,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "addAppointmentNotes",
      "file": "core/customer/dal/appointments.ts",
      "startLine": 276,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "getAppointmentReceipt",
      "file": "core/customer/dal/appointments.ts",
      "startLine": 303,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "searchSalons",
      "file": "core/customer/dal/bookings.ts",
      "startLine": 13,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getSalonBookingData",
      "file": "core/customer/dal/bookings.ts",
      "startLine": 81,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getAvailableTimeSlots",
      "file": "core/customer/dal/bookings.ts",
      "startLine": 231,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "createBooking",
      "file": "core/customer/dal/bookings.ts",
      "startLine": 331,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "cancelBooking",
      "file": "core/customer/dal/bookings.ts",
      "startLine": 399,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "rescheduleBooking",
      "file": "core/customer/dal/bookings.ts",
      "startLine": 453,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "getCustomerFavorites",
      "file": "core/customer/dal/favorites.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "isFavorite",
      "file": "core/customer/dal/favorites.ts",
      "startLine": 241,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getFavoritesByType",
      "file": "core/customer/dal/favorites.ts",
      "startLine": 265,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerLoyaltyPrograms",
      "file": "core/customer/dal/loyalty.ts",
      "startLine": 10,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "joinLoyaltyProgram",
      "file": "core/customer/dal/loyalty.ts",
      "startLine": 87,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getLoyaltyTransactions",
      "file": "core/customer/dal/loyalty.ts",
      "startLine": 188,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "redeemReward",
      "file": "core/customer/dal/loyalty.ts",
      "startLine": 243,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getAvailableLoyaltyPrograms",
      "file": "core/customer/dal/loyalty.ts",
      "startLine": 345,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerNotifications",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "markNotificationAsRead",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 71,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "getUnreadNotificationCount",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 143,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getNotificationPreferences",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 166,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "sendBookingReminder",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 357,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "sendBookingConfirmation",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 388,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "sendCancellationNotification",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 418,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "sendReviewRequest",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 442,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getDefaultNotificationPreferences",
      "file": "core/customer/dal/notifications.ts",
      "startLine": 462,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getCustomerProfile",
      "file": "core/customer/dal/profile.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getDefaultPreferences",
      "file": "core/customer/dal/profile.ts",
      "startLine": 198,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getCustomerReviews",
      "file": "core/customer/dal/reviews.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "submitReview",
      "file": "core/customer/dal/reviews.ts",
      "startLine": 140,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "updateReview",
      "file": "core/customer/dal/reviews.ts",
      "startLine": 315,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "getPendingReviews",
      "file": "core/customer/dal/reviews.ts",
      "startLine": 529,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "updateCustomerProfile",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 15,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "upsertCustomerPreferences",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 44,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "addCustomerFavorite",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 70,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "removeCustomerFavorite",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 92,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "clearFavoritesByType",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 186,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "DELETE"
      ],
      "issues": []
    },
    {
      "name": "addCustomerNote",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 224,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updateCustomerNote",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 247,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deleteCustomerNote",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 272,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "addLoyaltyPoints",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 288,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "redeemLoyaltyPoints",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 320,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "markCustomerAsVIP",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 342,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "removeVIPStatus",
      "file": "core/customers/dal/customers-mutations.ts",
      "startLine": 368,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "getCustomerWithAppointments",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 96,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerPreferences",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 143,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerFavorites",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 162,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerNotes",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 209,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getCustomerLoyaltyPoints",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 226,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getCustomerLoyaltyTransactions",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 243,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerMetrics",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 263,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerInsights",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 326,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "searchCustomers",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 449,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerByEmail",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 474,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerAppointments",
      "file": "core/customers/dal/customers-queries.ts",
      "startLine": 496,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getDashboardMetrics",
      "file": "core/dashboard/dal/index.ts",
      "startLine": 6,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getRevenueChart",
      "file": "core/dashboard/dal/index.ts",
      "startLine": 98,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getTopServices",
      "file": "core/dashboard/dal/index.ts",
      "startLine": 124,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getStaffPerformance",
      "file": "core/dashboard/dal/index.ts",
      "startLine": 153,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getTodayAppointments",
      "file": "core/dashboard/dal/index.ts",
      "startLine": 185,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getRecentActivity",
      "file": "core/dashboard/dal/index.ts",
      "startLine": 229,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "createFavorite",
      "file": "core/favorites/dal/favorites-mutations.ts",
      "startLine": 8,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "updateFavorite",
      "file": "core/favorites/dal/favorites-mutations.ts",
      "startLine": 29,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE",
        "DELETE"
      ],
      "issues": []
    },
    {
      "name": "getFavorites",
      "file": "core/favorites/dal/favorites-queries.ts",
      "startLine": 8,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getFavoriteById",
      "file": "core/favorites/dal/favorites-queries.ts",
      "startLine": 53,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "checkIsFavorite",
      "file": "core/favorites/dal/favorites-queries.ts",
      "startLine": 81,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "createGiftCard",
      "file": "core/gift-cards/dal/gift-cards-mutations.ts",
      "startLine": 14,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updateGiftCard",
      "file": "core/gift-cards/dal/gift-cards-mutations.ts",
      "startLine": 40,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "redeemGiftCard",
      "file": "core/gift-cards/dal/gift-cards-mutations.ts",
      "startLine": 59,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "refundToGiftCard",
      "file": "core/gift-cards/dal/gift-cards-mutations.ts",
      "startLine": 77,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "adjustGiftCardBalance",
      "file": "core/gift-cards/dal/gift-cards-mutations.ts",
      "startLine": 98,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deactivateGiftCard",
      "file": "core/gift-cards/dal/gift-cards-mutations.ts",
      "startLine": 118,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "reactivateGiftCard",
      "file": "core/gift-cards/dal/gift-cards-mutations.ts",
      "startLine": 137,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "extendGiftCardValidity",
      "file": "core/gift-cards/dal/gift-cards-mutations.ts",
      "startLine": 153,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "sendGiftCardNotification",
      "file": "core/gift-cards/dal/gift-cards-mutations.ts",
      "startLine": 172,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "bulkCreateGiftCards",
      "file": "core/gift-cards/dal/gift-cards-mutations.ts",
      "startLine": 191,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "to",
      "file": "core/gift-cards/dal/gift-cards-mutations.ts",
      "startLine": 207,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "generateGiftCardCode",
      "file": "core/gift-cards/dal/gift-cards-mutations.ts",
      "startLine": 208,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getGiftCards",
      "file": "core/gift-cards/dal/gift-cards-queries.ts",
      "startLine": 17,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getGiftCardById",
      "file": "core/gift-cards/dal/gift-cards-queries.ts",
      "startLine": 36,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getGiftCardByCode",
      "file": "core/gift-cards/dal/gift-cards-queries.ts",
      "startLine": 54,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "validateGiftCard",
      "file": "core/gift-cards/dal/gift-cards-queries.ts",
      "startLine": 72,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getGiftCardTransactions",
      "file": "core/gift-cards/dal/gift-cards-queries.ts",
      "startLine": 94,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getGiftCardsByPurchaser",
      "file": "core/gift-cards/dal/gift-cards-queries.ts",
      "startLine": 112,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getGiftCardsByRecipient",
      "file": "core/gift-cards/dal/gift-cards-queries.ts",
      "startLine": 131,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getGiftCardStats",
      "file": "core/gift-cards/dal/gift-cards-queries.ts",
      "startLine": 150,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getExpiringGiftCards",
      "file": "core/gift-cards/dal/gift-cards-queries.ts",
      "startLine": 176,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "searchGiftCards",
      "file": "core/gift-cards/dal/gift-cards-queries.ts",
      "startLine": 195,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "createInventoryItem",
      "file": "core/inventory/dal/inventory-mutations.ts",
      "startLine": 13,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updateInventoryItem",
      "file": "core/inventory/dal/inventory-mutations.ts",
      "startLine": 38,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deleteInventoryItem",
      "file": "core/inventory/dal/inventory-mutations.ts",
      "startLine": 63,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "adjustStock",
      "file": "core/inventory/dal/inventory-mutations.ts",
      "startLine": 78,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "recordTransaction",
      "file": "core/inventory/dal/inventory-mutations.ts",
      "startLine": 108,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "bulkUpdateInventory",
      "file": "core/inventory/dal/inventory-mutations.ts",
      "startLine": 131,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "importInventory",
      "file": "core/inventory/dal/inventory-mutations.ts",
      "startLine": 159,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getInventoryItems",
      "file": "core/inventory/dal/inventory-queries.ts",
      "startLine": 14,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getInventoryItem",
      "file": "core/inventory/dal/inventory-queries.ts",
      "startLine": 40,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getInventoryStats",
      "file": "core/inventory/dal/inventory-queries.ts",
      "startLine": 58,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getLowStockItems",
      "file": "core/inventory/dal/inventory-queries.ts",
      "startLine": 83,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getExpiringItems",
      "file": "core/inventory/dal/inventory-queries.ts",
      "startLine": 101,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getInventoryTransactions",
      "file": "core/inventory/dal/inventory-queries.ts",
      "startLine": 120,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "searchInventoryItems",
      "file": "core/inventory/dal/inventory-queries.ts",
      "startLine": 139,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deleteCategory",
      "file": "core/inventory/dal/product-mutations.ts",
      "startLine": 110,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "DELETE"
      ],
      "issues": []
    },
    {
      "name": "deletePurchaseOrder",
      "file": "core/inventory/dal/purchase-order-mutations.ts",
      "startLine": 192,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "DELETE"
      ],
      "issues": []
    },
    {
      "name": "getPurchaseOrderItems",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 341,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getStockMovements",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 360,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getInventoryMetrics",
      "file": "core/inventory/dal/queries.ts",
      "startLine": 459,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "deleteSupplier",
      "file": "core/inventory/dal/supplier-mutations.ts",
      "startLine": 50,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "DELETE"
      ],
      "issues": []
    },
    {
      "name": "createlocations",
      "file": "core/locations/dal/locations-mutations.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updatelocations",
      "file": "core/locations/dal/locations-mutations.ts",
      "startLine": 16,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deletelocations",
      "file": "core/locations/dal/locations-mutations.ts",
      "startLine": 31,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getLocationss",
      "file": "core/locations/dal/locations-queries.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getLocationsById",
      "file": "core/locations/dal/locations-queries.ts",
      "startLine": 23,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "createLoyaltyProgram",
      "file": "core/loyalty/dal/loyalty.ts",
      "startLine": 63,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "enrollCustomer",
      "file": "core/loyalty/dal/loyalty.ts",
      "startLine": 204,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "awardPoints",
      "file": "core/loyalty/dal/loyalty.ts",
      "startLine": 295,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "redeemPoints",
      "file": "core/loyalty/dal/loyalty.ts",
      "startLine": 373,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "getLoyaltyTransactions",
      "file": "core/loyalty/dal/loyalty.ts",
      "startLine": 451,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "createLoyaltyProgram",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 21,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "enrollCustomer",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 136,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "addLoyaltyTransaction",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 224,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "awardPointsForAppointment",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 303,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "redeemPoints",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 358,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "adjustPoints",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 384,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "addPoints",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 406,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "createLoyaltyTier",
      "file": "core/loyalty/dal/mutations.ts",
      "startLine": 465,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "getProgramMembers",
      "file": "core/loyalty/dal/queries.ts",
      "startLine": 105,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getLoyaltyDashboard",
      "file": "core/loyalty/dal/queries.ts",
      "startLine": 216,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "searchLoyaltyMembers",
      "file": "core/loyalty/dal/queries.ts",
      "startLine": 301,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getCustomerLoyalties",
      "file": "core/loyalty/dal/queries.ts",
      "startLine": 349,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getLoyaltyStatistics",
      "file": "core/loyalty/dal/queries.ts",
      "startLine": 463,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "calculatePointsForPurchase",
      "file": "core/loyalty/dal/queries.ts",
      "startLine": 530,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "createNotification",
      "file": "core/notifications/dal/notifications-mutations.ts",
      "startLine": 13,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "updateNotification",
      "file": "core/notifications/dal/notifications-mutations.ts",
      "startLine": 53,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "deleteNotification",
      "file": "core/notifications/dal/notifications-mutations.ts",
      "startLine": 62,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "markNotificationAsRead",
      "file": "core/notifications/dal/notifications-mutations.ts",
      "startLine": 71,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "markAllNotificationsAsRead",
      "file": "core/notifications/dal/notifications-mutations.ts",
      "startLine": 80,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "archiveNotification",
      "file": "core/notifications/dal/notifications-mutations.ts",
      "startLine": 89,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "updateNotificationPreferences",
      "file": "core/notifications/dal/notifications-mutations.ts",
      "startLine": 98,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "clearExpiredNotifications",
      "file": "core/notifications/dal/notifications-mutations.ts",
      "startLine": 107,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "sendBulkNotifications",
      "file": "core/notifications/dal/notifications-mutations.ts",
      "startLine": 116,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getNotifications",
      "file": "core/notifications/dal/notifications-queries.ts",
      "startLine": 15,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getNotificationById",
      "file": "core/notifications/dal/notifications-queries.ts",
      "startLine": 28,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getUnreadNotificationsCount",
      "file": "core/notifications/dal/notifications-queries.ts",
      "startLine": 40,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getNotificationStats",
      "file": "core/notifications/dal/notifications-queries.ts",
      "startLine": 52,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getUnreadNotificationCount",
      "file": "core/notifications/dal/notifications-queries.ts",
      "startLine": 71,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getNotificationTemplates",
      "file": "core/notifications/dal/notifications-queries.ts",
      "startLine": 81,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getNotificationTemplateByCode",
      "file": "core/notifications/dal/notifications-queries.ts",
      "startLine": 90,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getUserNotificationPreferences",
      "file": "core/notifications/dal/notifications-queries.ts",
      "startLine": 99,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getRecentNotifications",
      "file": "core/notifications/dal/notifications-queries.ts",
      "startLine": 107,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getNotificationsByEntity",
      "file": "core/notifications/dal/notifications-queries.ts",
      "startLine": 115,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getExpiredNotifications",
      "file": "core/notifications/dal/notifications-queries.ts",
      "startLine": 123,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "createpackages",
      "file": "core/packages/dal/packages-mutations.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updatepackages",
      "file": "core/packages/dal/packages-mutations.ts",
      "startLine": 16,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deletepackages",
      "file": "core/packages/dal/packages-mutations.ts",
      "startLine": 28,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getPackagess",
      "file": "core/packages/dal/packages-queries.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getPackagesById",
      "file": "core/packages/dal/packages-queries.ts",
      "startLine": 23,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updateProfile",
      "file": "core/profiles/dal/profiles-mutations.ts",
      "startLine": 12,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "createProfile",
      "file": "core/profiles/dal/profiles-mutations.ts",
      "startLine": 18,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getProfileById",
      "file": "core/profiles/dal/profiles-queries.ts",
      "startLine": 17,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getProfileByUserId",
      "file": "core/profiles/dal/profiles-queries.ts",
      "startLine": 23,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getStaffProfile",
      "file": "core/profiles/dal/profiles-queries.ts",
      "startLine": 32,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getFeaturedServices",
      "file": "core/public/dal/public-queries.ts",
      "startLine": 14,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getTestimonials",
      "file": "core/public/dal/public-queries.ts",
      "startLine": 56,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getPricingPlans",
      "file": "core/public/dal/public-queries.ts",
      "startLine": 92,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getFAQItems",
      "file": "core/public/dal/public-queries.ts",
      "startLine": 152,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getTeamMembers",
      "file": "core/public/dal/public-queries.ts",
      "startLine": 199,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "createreferrals",
      "file": "core/referrals/dal/referrals-mutations.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updatereferrals",
      "file": "core/referrals/dal/referrals-mutations.ts",
      "startLine": 16,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deletereferrals",
      "file": "core/referrals/dal/referrals-mutations.ts",
      "startLine": 31,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getReferralss",
      "file": "core/referrals/dal/referrals-queries.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getReferralsById",
      "file": "core/referrals/dal/referrals-queries.ts",
      "startLine": 23,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getFeaturedReviews",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 71,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getSalonReviews",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 124,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getReviewsForSalon",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 307,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getReviewsForStaff",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 313,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getReviewsForCustomer",
      "file": "core/reviews/dal/reviews-queries.ts",
      "startLine": 320,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "createroles",
      "file": "core/roles/dal/roles-mutations.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updateroles",
      "file": "core/roles/dal/roles-mutations.ts",
      "startLine": 16,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deleteroles",
      "file": "core/roles/dal/roles-mutations.ts",
      "startLine": 28,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getRoless",
      "file": "core/roles/dal/roles-queries.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getRolesById",
      "file": "core/roles/dal/roles-queries.ts",
      "startLine": 23,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "createsalonchains",
      "file": "core/salon-chains/dal/salon-chains-mutations.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updatesalonchains",
      "file": "core/salon-chains/dal/salon-chains-mutations.ts",
      "startLine": 16,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deletesalonchains",
      "file": "core/salon-chains/dal/salon-chains-mutations.ts",
      "startLine": 31,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getSalonChainss",
      "file": "core/salon-chains/dal/salon-chains-queries.ts",
      "startLine": 7,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getSalonChainsById",
      "file": "core/salon-chains/dal/salon-chains-queries.ts",
      "startLine": 26,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getSalonChains",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 265,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getSalonChainById",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 275,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getSalonMetrics",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 287,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getSalonRevenue",
      "file": "core/salons/dal/salons-queries.ts",
      "startLine": 386,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "resolveScheduleConflict",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 28,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "optimizeSchedule",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 97,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "autoAssignAppointments",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 175,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "createStaffSchedule",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 223,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "updateStaffSchedule",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 241,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "createBlockedTime",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 260,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "updateBlockedTime",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 278,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "createTimeOffRequest",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 297,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "updateTimeOffRequest",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 315,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "getAllScheduleConflicts",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 495,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "generateOptimizationChanges",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 500,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "calculateOptimizationImprovements",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 509,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "calculateOptimizationScore",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 518,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "findOptimalAssignment",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 523,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "createschedules",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 532,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updateschedules",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 544,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deleteschedules",
      "file": "core/schedules/dal/schedules-mutations.ts",
      "startLine": 559,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getStaffAvailability",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 21,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "detectScheduleConflicts",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 95,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "suggestOptimalSlots",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 157,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "calculateDayAvailability",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 268,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "checkWorkingHoursViolation",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 371,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "checkTimeOffConflicts",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 376,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "checkBreakTimeConflicts",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 381,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "checkResourceConflicts",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 386,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "generateDoubleBookingResolutions",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 391,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "optimizeSlotSelection",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 396,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "calculateSlotScore",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 401,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getScheduless",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 410,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getSchedulesById",
      "file": "core/schedules/dal/schedules-queries.ts",
      "startLine": 429,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "checkPermission",
      "file": "core/security/dal/auth-verification.ts",
      "startLine": 160,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "buildPermissions",
      "file": "core/security/dal/auth-verification.ts",
      "startLine": 280,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "sanitizeInput",
      "file": "core/security/dal/auth-verification.ts",
      "startLine": 448,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "createSecureDTO",
      "file": "core/security/dal/auth-verification.ts",
      "startLine": 476,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "verifyPKCEFlow",
      "file": "core/security/dal/auth-verification.ts",
      "startLine": 505,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "secureQueryPattern",
      "file": "core/security/dal/secure-dal-patterns.ts",
      "startLine": 18,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "secureMutationPattern",
      "file": "core/security/dal/secure-dal-patterns.ts",
      "startLine": 63,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "secureBatchQuery",
      "file": "core/security/dal/secure-dal-patterns.ts",
      "startLine": 239,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "securePaginatedQuery",
      "file": "core/security/dal/secure-dal-patterns.ts",
      "startLine": 285,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "createCachedQuery",
      "file": "core/security/dal/secure-dal-patterns.ts",
      "startLine": 349,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "cachedQuery",
      "file": "core/security/dal/secure-dal-patterns.ts",
      "startLine": 353,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "secureTransaction",
      "file": "core/security/dal/secure-dal-patterns.ts",
      "startLine": 376,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "logAuthAttempt",
      "file": "core/security/dal/security-logging.ts",
      "startLine": 102,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "logDataAccess",
      "file": "core/security/dal/security-logging.ts",
      "startLine": 120,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "logPermissionDenied",
      "file": "core/security/dal/security-logging.ts",
      "startLine": 139,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "logSuspiciousActivity",
      "file": "core/security/dal/security-logging.ts",
      "startLine": 156,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getSecurityEvents",
      "file": "core/security/dal/security-logging.ts",
      "startLine": 173,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "removeServiceFromStaff",
      "file": "core/services/dal/services-mutations.ts",
      "startLine": 383,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "DELETE"
      ],
      "issues": []
    },
    {
      "name": "getCategoriesWithServices",
      "file": "core/services/dal/services-queries.ts",
      "startLine": 308,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getStaffServices",
      "file": "core/services/dal/services-queries.ts",
      "startLine": 324,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "isSelectQueryError",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 10,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "hasUserRoles",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 20,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getCustomerAnalytics",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 41,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getDailyMetrics",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 61,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "calculateAppointmentTotal",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 75,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "adaptSalonData",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 93,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "adaptUserData",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 160,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "userRoles",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 164,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "adaptAuditLog",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 185,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "safeQuery",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 193,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "getTable",
      "file": "core/shared/dal/database-adapters.ts",
      "startLine": 211,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getStaffProfiles",
      "file": "core/staff/dal/index.ts",
      "startLine": 15,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getStaffProfileById",
      "file": "core/staff/dal/index.ts",
      "startLine": 71,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "createStaffProfile",
      "file": "core/staff/dal/index.ts",
      "startLine": 102,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "createStaffSchedule",
      "file": "core/staff/dal/index.ts",
      "startLine": 184,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "updateStaffSchedule",
      "file": "core/staff/dal/index.ts",
      "startLine": 200,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "deleteStaffSchedule",
      "file": "core/staff/dal/index.ts",
      "startLine": 220,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "getTimeOffRequests",
      "file": "core/staff/dal/index.ts",
      "startLine": 239,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "createTimeOffRequest",
      "file": "core/staff/dal/index.ts",
      "startLine": 279,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "approveTimeOffRequest",
      "file": "core/staff/dal/index.ts",
      "startLine": 295,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "updateStaffPerformance",
      "file": "core/staff/dal/index.ts",
      "startLine": 368,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "getStaffServices",
      "file": "core/staff/dal/index.ts",
      "startLine": 389,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "assignServiceToStaff",
      "file": "core/staff/dal/index.ts",
      "startLine": 416,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "assignServiceToStaff",
      "file": "core/staff/dal/staff-mutations.ts",
      "startLine": 490,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "getStaffSchedule",
      "file": "core/staff/dal/staff-queries.ts",
      "startLine": 477,
      "hasAuthCheck": false,
      "hasRlsCheck": false,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    },
    {
      "name": "createsubscriptions",
      "file": "core/subscriptions/dal/subscriptions-mutations.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updatesubscriptions",
      "file": "core/subscriptions/dal/subscriptions-mutations.ts",
      "startLine": 16,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deletesubscriptions",
      "file": "core/subscriptions/dal/subscriptions-mutations.ts",
      "startLine": 31,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getSubscriptionss",
      "file": "core/subscriptions/dal/subscriptions-queries.ts",
      "startLine": 7,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getSubscriptionsById",
      "file": "core/subscriptions/dal/subscriptions-queries.ts",
      "startLine": 26,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "createtimeoff",
      "file": "core/time-off/dal/time-off-mutations.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "updatetimeoff",
      "file": "core/time-off/dal/time-off-mutations.ts",
      "startLine": 16,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "deletetimeoff",
      "file": "core/time-off/dal/time-off-mutations.ts",
      "startLine": 28,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getTimeOffs",
      "file": "core/time-off/dal/time-off-queries.ts",
      "startLine": 4,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getTimeOffById",
      "file": "core/time-off/dal/time-off-queries.ts",
      "startLine": 23,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "createUserProfile",
      "file": "core/users/dal/users-mutations.ts",
      "startLine": 14,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "updateUserProfile",
      "file": "core/users/dal/users-mutations.ts",
      "startLine": 36,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "deactivateUser",
      "file": "core/users/dal/users-mutations.ts",
      "startLine": 62,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "reactivateUser",
      "file": "core/users/dal/users-mutations.ts",
      "startLine": 88,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "updateUserRole",
      "file": "core/users/dal/users-mutations.ts",
      "startLine": 115,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "suspendUser",
      "file": "core/users/dal/users-mutations.ts",
      "startLine": 173,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "performBulkUserOperation",
      "file": "core/users/dal/users-mutations.ts",
      "startLine": 218,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "importUsers",
      "file": "core/users/dal/users-mutations.ts",
      "startLine": 281,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "INSERT"
      ],
      "issues": []
    },
    {
      "name": "updateUserSecuritySettings",
      "file": "core/users/dal/users-mutations.ts",
      "startLine": 337,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "verifyUserEmail",
      "file": "core/users/dal/users-mutations.ts",
      "startLine": 384,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "deleteUser",
      "file": "core/users/dal/users-mutations.ts",
      "startLine": 420,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT",
        "INSERT",
        "UPDATE"
      ],
      "issues": []
    },
    {
      "name": "getUserManagementStats",
      "file": "core/users/dal/users-queries.ts",
      "startLine": 177,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getUserActivity",
      "file": "core/users/dal/users-queries.ts",
      "startLine": 287,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getAvailableRoles",
      "file": "core/users/dal/users-queries.ts",
      "startLine": 320,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [],
      "issues": []
    },
    {
      "name": "getUserByEmail",
      "file": "core/users/dal/users-queries.ts",
      "startLine": 432,
      "hasAuthCheck": true,
      "hasRlsCheck": false,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getUserRole",
      "file": "core/users/dal/users-queries.ts",
      "startLine": 460,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "getUserMetrics",
      "file": "core/users/dal/users-queries.ts",
      "startLine": 491,
      "hasAuthCheck": true,
      "hasRlsCheck": true,
      "hasErrorHandling": true,
      "hasValidation": true,
      "operations": [
        "SELECT"
      ],
      "issues": []
    },
    {
      "name": "calculateProfileCompletion",
      "file": "core/users/dal/users-queries.ts",
      "startLine": 535,
      "hasAuthCheck": false,
      "hasRlsCheck": true,
      "hasErrorHandling": false,
      "hasValidation": false,
      "operations": [],
      "issues": []
    }
  ],
  "issuesByType": {},
  "recommendations": [
    "🚨 CRITICAL: 90 critical security issues found. Fix these immediately to prevent data breaches.",
    "🔐 Authentication: 14 functions lack auth checks. Add getCurrentUser() checks to all write operations.",
    "🛡️ Row Level Security: 34 functions bypass RLS. Add appropriate filters to ensure users only access their data.",
    "💉 SQL Injection: 76 potential SQL injection vulnerabilities. Never use string interpolation in queries. Use parameterized queries.",
    "✅ Validation: 98 functions lack input validation. Implement Zod schemas for all data inputs.",
    "⚠️ Error Handling: 57 functions lack proper error handling. Wrap all database operations in try-catch blocks."
  ],
  "securityScore": 95
}